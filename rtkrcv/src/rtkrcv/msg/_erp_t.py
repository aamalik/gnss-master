"""autogenerated by genpy from rtkrcv/erp_t.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rtkrcv.msg

class erp_t(genpy.Message):
  _md5sum = "f92506c5fa83c7103817a4617b01f94e"
  _type = "rtkrcv/erp_t"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# earth rotation parameter type

erpd_t[] data         # earth rotation parameter data
================================================================================
MSG: rtkrcv/erpd_t
# earth rotation parameter data type

float64 mjd                 # mjd (days)
float64 xp
float64 yp                  # pole offset (rad)
float64 xpr
float64 ypr                 # pole offset rate (rad/day)
float64 ut1_utc             # ut1-utc (s)
float64 lod                 # length of day (s/day)
"""
  __slots__ = ['data']
  _slot_types = ['rtkrcv/erpd_t[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(erp_t, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = []
    else:
      self.data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1
        buff.write(_struct_7d.pack(_x.mjd, _x.xp, _x.yp, _x.xpr, _x.ypr, _x.ut1_utc, _x.lod))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.data is None:
        self.data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = rtkrcv.msg.erpd_t()
        _x = val1
        start = end
        end += 56
        (_x.mjd, _x.xp, _x.yp, _x.xpr, _x.ypr, _x.ut1_utc, _x.lod,) = _struct_7d.unpack(str[start:end])
        self.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.data:
        _x = val1
        buff.write(_struct_7d.pack(_x.mjd, _x.xp, _x.yp, _x.xpr, _x.ypr, _x.ut1_utc, _x.lod))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.data is None:
        self.data = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.data = []
      for i in range(0, length):
        val1 = rtkrcv.msg.erpd_t()
        _x = val1
        start = end
        end += 56
        (_x.mjd, _x.xp, _x.yp, _x.xpr, _x.ypr, _x.ut1_utc, _x.lod,) = _struct_7d.unpack(str[start:end])
        self.data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
