"""autogenerated by genpy from rtkrcv/QzssIonosphereCorrection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class QzssIonosphereCorrection(genpy.Message):
  _md5sum = "ea4c4afab86c4c57082330cf44915cef"
  _type = "rtkrcv/QzssIonosphereCorrection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# QZSS LEX ionosphere correction type

time t0                      # epoch time (GPST)
float64 tspan                # valid time span (s)
float64[2] pos0              # reference position {lat,lon} (rad)
float64[6] coefs             # coefficients lat x lon (3 x 2)
"""
  __slots__ = ['t0','tspan','pos0','coefs']
  _slot_types = ['time','float64','float64[2]','float64[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t0,tspan,pos0,coefs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QzssIonosphereCorrection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.tspan is None:
        self.tspan = 0.
      if self.pos0 is None:
        self.pos0 = [0.,0.]
      if self.coefs is None:
        self.coefs = [0.,0.,0.,0.,0.,0.]
    else:
      self.t0 = genpy.Time()
      self.tspan = 0.
      self.pos0 = [0.,0.]
      self.coefs = [0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Id.pack(_x.t0.secs, _x.t0.nsecs, _x.tspan))
      buff.write(_struct_2d.pack(*self.pos0))
      buff.write(_struct_6d.pack(*self.coefs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.t0.secs, _x.t0.nsecs, _x.tspan,) = _struct_2Id.unpack(str[start:end])
      start = end
      end += 16
      self.pos0 = _struct_2d.unpack(str[start:end])
      start = end
      end += 48
      self.coefs = _struct_6d.unpack(str[start:end])
      self.t0.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Id.pack(_x.t0.secs, _x.t0.nsecs, _x.tspan))
      buff.write(self.pos0.tostring())
      buff.write(self.coefs.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.t0.secs, _x.t0.nsecs, _x.tspan,) = _struct_2Id.unpack(str[start:end])
      start = end
      end += 16
      self.pos0 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 48
      self.coefs = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      self.t0.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_2Id = struct.Struct("<2Id")
_struct_6d = struct.Struct("<6d")
