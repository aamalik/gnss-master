"""autogenerated by genpy from rtkrcv/Almanac.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Almanac(genpy.Message):
  _md5sum = "02371516dbcab8da95b5821d7089f77e"
  _type = "rtkrcv/Almanac"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The almanac consists of coarse orbit and status information for each satellite in the constellation, an ionospheric model, and information to relate GNSS derived time to Coordinated Universal Time (UTC)

int32 sat                     # satellite number
int32 svh                     # sv health (0:ok)
int32 svconf                  # as and sv config
int32 week                    # GPS/QZS: gps week, GAL: galileo week
Header toa                    # Toa

# SV orbit parameters
float64 A
float64 e
float64 i0
float64 OMG0
float64 omg
float64 M0
float64 OMGd

float64 toas                  # Toa (s) in week

# SV clock parameters (af0,af1)
float64 f0
float64 f1
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['sat','svh','svconf','week','toa','A','e','i0','OMG0','omg','M0','OMGd','toas','f0','f1']
  _slot_types = ['int32','int32','int32','int32','std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sat,svh,svconf,week,toa,A,e,i0,OMG0,omg,M0,OMGd,toas,f0,f1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Almanac, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sat is None:
        self.sat = 0
      if self.svh is None:
        self.svh = 0
      if self.svconf is None:
        self.svconf = 0
      if self.week is None:
        self.week = 0
      if self.toa is None:
        self.toa = std_msgs.msg.Header()
      if self.A is None:
        self.A = 0.
      if self.e is None:
        self.e = 0.
      if self.i0 is None:
        self.i0 = 0.
      if self.OMG0 is None:
        self.OMG0 = 0.
      if self.omg is None:
        self.omg = 0.
      if self.M0 is None:
        self.M0 = 0.
      if self.OMGd is None:
        self.OMGd = 0.
      if self.toas is None:
        self.toas = 0.
      if self.f0 is None:
        self.f0 = 0.
      if self.f1 is None:
        self.f1 = 0.
    else:
      self.sat = 0
      self.svh = 0
      self.svconf = 0
      self.week = 0
      self.toa = std_msgs.msg.Header()
      self.A = 0.
      self.e = 0.
      self.i0 = 0.
      self.OMG0 = 0.
      self.omg = 0.
      self.M0 = 0.
      self.OMGd = 0.
      self.toas = 0.
      self.f0 = 0.
      self.f1 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4i3I.pack(_x.sat, _x.svh, _x.svconf, _x.week, _x.toa.seq, _x.toa.stamp.secs, _x.toa.stamp.nsecs))
      _x = self.toa.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d.pack(_x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.OMGd, _x.toas, _x.f0, _x.f1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.toa is None:
        self.toa = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sat, _x.svh, _x.svconf, _x.week, _x.toa.seq, _x.toa.stamp.secs, _x.toa.stamp.nsecs,) = _struct_4i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.toa.frame_id = str[start:end].decode('utf-8')
      else:
        self.toa.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.OMGd, _x.toas, _x.f0, _x.f1,) = _struct_10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4i3I.pack(_x.sat, _x.svh, _x.svconf, _x.week, _x.toa.seq, _x.toa.stamp.secs, _x.toa.stamp.nsecs))
      _x = self.toa.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10d.pack(_x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.OMGd, _x.toas, _x.f0, _x.f1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.toa is None:
        self.toa = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sat, _x.svh, _x.svconf, _x.week, _x.toa.seq, _x.toa.stamp.secs, _x.toa.stamp.nsecs,) = _struct_4i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.toa.frame_id = str[start:end].decode('utf-8')
      else:
        self.toa.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.OMGd, _x.toas, _x.f0, _x.f1,) = _struct_10d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i3I = struct.Struct("<4i3I")
_struct_10d = struct.Struct("<10d")
