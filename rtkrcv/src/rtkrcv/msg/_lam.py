"""autogenerated by genpy from rtkrcv/lam.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lam(genpy.Message):
  _md5sum = "0e5d8dc29bcb26f90e5ef349923e14be"
  _type = "rtkrcv/lam"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Datatype for lam message type (carrier wave lengths (m) )

float64 L1
float64 L2
float64 L5
float64 L6
float64 L7
float64 L8

"""
  __slots__ = ['L1','L2','L5','L6','L7','L8']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       L1,L2,L5,L6,L7,L8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lam, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.L1 is None:
        self.L1 = 0.
      if self.L2 is None:
        self.L2 = 0.
      if self.L5 is None:
        self.L5 = 0.
      if self.L6 is None:
        self.L6 = 0.
      if self.L7 is None:
        self.L7 = 0.
      if self.L8 is None:
        self.L8 = 0.
    else:
      self.L1 = 0.
      self.L2 = 0.
      self.L5 = 0.
      self.L6 = 0.
      self.L7 = 0.
      self.L8 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.L1, _x.L2, _x.L5, _x.L6, _x.L7, _x.L8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.L1, _x.L2, _x.L5, _x.L6, _x.L7, _x.L8,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.L1, _x.L2, _x.L5, _x.L6, _x.L7, _x.L8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.L1, _x.L2, _x.L5, _x.L6, _x.L7, _x.L8,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
