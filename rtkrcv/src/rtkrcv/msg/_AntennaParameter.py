"""autogenerated by genpy from rtkrcv/AntennaParameter.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class AntennaParameter(genpy.Message):
  _md5sum = "236a657acfdd1f8edc7d4eec1fcbfcc4"
  _type = "rtkrcv/AntennaParameter"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# antenna parameter type

int32 sat              # satellite number (0:receiver)
int8[] type            # antenna type
int8[] code            # serial number or satellite code

time ts                # valid time start
time te                # valid time end

float64[3] off         # phase center offset e/n/u or x/y/z (m)
float64[19] var        # phase center variation (m)
                       # el=90,85,...,0 or nadir=0,1,2,3,... (deg)
"""
  __slots__ = ['sat','type','code','ts','te','off','var']
  _slot_types = ['int32','int8[]','int8[]','time','time','float64[3]','float64[19]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sat,type,code,ts,te,off,var

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AntennaParameter, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sat is None:
        self.sat = 0
      if self.type is None:
        self.type = []
      if self.code is None:
        self.code = []
      if self.ts is None:
        self.ts = genpy.Time()
      if self.te is None:
        self.te = genpy.Time()
      if self.off is None:
        self.off = [0.,0.,0.]
      if self.var is None:
        self.var = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.sat = 0
      self.type = []
      self.code = []
      self.ts = genpy.Time()
      self.te = genpy.Time()
      self.off = [0.,0.,0.]
      self.var = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.sat))
      length = len(self.type)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.type))
      length = len(self.code)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.code))
      _x = self
      buff.write(_struct_4I.pack(_x.ts.secs, _x.ts.nsecs, _x.te.secs, _x.te.nsecs))
      buff.write(_struct_3d.pack(*self.off))
      buff.write(_struct_19d.pack(*self.var))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ts is None:
        self.ts = genpy.Time()
      if self.te is None:
        self.te = genpy.Time()
      end = 0
      start = end
      end += 4
      (self.sat,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.type = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.code = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.ts.secs, _x.ts.nsecs, _x.te.secs, _x.te.nsecs,) = _struct_4I.unpack(str[start:end])
      start = end
      end += 24
      self.off = _struct_3d.unpack(str[start:end])
      start = end
      end += 152
      self.var = _struct_19d.unpack(str[start:end])
      self.ts.canon()
      self.te.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.sat))
      length = len(self.type)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.type.tostring())
      length = len(self.code)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.code.tostring())
      _x = self
      buff.write(_struct_4I.pack(_x.ts.secs, _x.ts.nsecs, _x.te.secs, _x.te.nsecs))
      buff.write(self.off.tostring())
      buff.write(self.var.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ts is None:
        self.ts = genpy.Time()
      if self.te is None:
        self.te = genpy.Time()
      end = 0
      start = end
      end += 4
      (self.sat,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.type = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.code = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 16
      (_x.ts.secs, _x.ts.nsecs, _x.te.secs, _x.te.nsecs,) = _struct_4I.unpack(str[start:end])
      start = end
      end += 24
      self.off = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 152
      self.var = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=19)
      self.ts.canon()
      self.te.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_19d = struct.Struct("<19d")
_struct_3d = struct.Struct("<3d")
_struct_4I = struct.Struct("<4I")
