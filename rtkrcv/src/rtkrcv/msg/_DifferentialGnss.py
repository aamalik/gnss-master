"""autogenerated by genpy from rtkrcv/DifferentialGnss.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DifferentialGnss(genpy.Message):
  _md5sum = "512aa2736c1354bc1ba3a9dc20331f42"
  _type = "rtkrcv/DifferentialGnss"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# DGPS/GNSS correction type

time t0             # correction time
float64 prc         # pseudorange correction (PRC) (m)
float64 rrc         # range rate correction (RRC) (m/s)
int32 iod           # issue of data (IOD)
float64 udre        # UDRE
"""
  __slots__ = ['t0','prc','rrc','iod','udre']
  _slot_types = ['time','float64','float64','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t0,prc,rrc,iod,udre

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DifferentialGnss, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.prc is None:
        self.prc = 0.
      if self.rrc is None:
        self.rrc = 0.
      if self.iod is None:
        self.iod = 0
      if self.udre is None:
        self.udre = 0.
    else:
      self.t0 = genpy.Time()
      self.prc = 0.
      self.rrc = 0.
      self.iod = 0
      self.udre = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I2did.pack(_x.t0.secs, _x.t0.nsecs, _x.prc, _x.rrc, _x.iod, _x.udre))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.t0.secs, _x.t0.nsecs, _x.prc, _x.rrc, _x.iod, _x.udre,) = _struct_2I2did.unpack(str[start:end])
      self.t0.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I2did.pack(_x.t0.secs, _x.t0.nsecs, _x.prc, _x.rrc, _x.iod, _x.udre))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.t0.secs, _x.t0.nsecs, _x.prc, _x.rrc, _x.iod, _x.udre,) = _struct_2I2did.unpack(str[start:end])
      self.t0.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I2did = struct.Struct("<2I2did")
