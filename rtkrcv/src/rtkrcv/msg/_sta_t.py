"""autogenerated by genpy from rtkrcv/sta_t.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class sta_t(genpy.Message):
  _md5sum = "f30681337a9aca787ae7f969e9464469"
  _type = "rtkrcv/sta_t"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# station parameter type

std_msgs/String name           # marker name
std_msgs/String marker         # marker number
std_msgs/String antdes         # antenna descriptor
std_msgs/String antsno         # antenna serial number
std_msgs/String rectype        # receiver type descriptor
std_msgs/String recver         # receiver firmware version
std_msgs/String recsno         # receiver serial number

int32 antsetup                 # antenna setup id
int32 itrf                     # ITRF realization year
int32 deltype                  # antenna delta type (0:enu,1:xyz)

geometry_msgs/Vector3 pos      # station position (ecef) (m)
geometry_msgs/Vector3 del      # antenna position delta (e/n/u or x/y/z) (m)
int64 hgt                      # antenna height (m)
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['name','marker','antdes','antsno','rectype','recver','recsno','antsetup','itrf','deltype','pos','del_','hgt']
  _slot_types = ['std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/String','int32','int32','int32','geometry_msgs/Vector3','geometry_msgs/Vector3','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,marker,antdes,antsno,rectype,recver,recsno,antsetup,itrf,deltype,pos,del_,hgt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sta_t, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.marker is None:
        self.marker = std_msgs.msg.String()
      if self.antdes is None:
        self.antdes = std_msgs.msg.String()
      if self.antsno is None:
        self.antsno = std_msgs.msg.String()
      if self.rectype is None:
        self.rectype = std_msgs.msg.String()
      if self.recver is None:
        self.recver = std_msgs.msg.String()
      if self.recsno is None:
        self.recsno = std_msgs.msg.String()
      if self.antsetup is None:
        self.antsetup = 0
      if self.itrf is None:
        self.itrf = 0
      if self.deltype is None:
        self.deltype = 0
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.del_ is None:
        self.del_ = geometry_msgs.msg.Vector3()
      if self.hgt is None:
        self.hgt = 0
    else:
      self.name = std_msgs.msg.String()
      self.marker = std_msgs.msg.String()
      self.antdes = std_msgs.msg.String()
      self.antsno = std_msgs.msg.String()
      self.rectype = std_msgs.msg.String()
      self.recver = std_msgs.msg.String()
      self.recsno = std_msgs.msg.String()
      self.antsetup = 0
      self.itrf = 0
      self.deltype = 0
      self.pos = geometry_msgs.msg.Vector3()
      self.del_ = geometry_msgs.msg.Vector3()
      self.hgt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.marker.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.antdes.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.antsno.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rectype.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.recver.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.recsno.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i6dq.pack(_x.antsetup, _x.itrf, _x.deltype, _x.pos.x, _x.pos.y, _x.pos.z, _x.del_.x, _x.del_.y, _x.del_.z, _x.hgt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.marker is None:
        self.marker = std_msgs.msg.String()
      if self.antdes is None:
        self.antdes = std_msgs.msg.String()
      if self.antsno is None:
        self.antsno = std_msgs.msg.String()
      if self.rectype is None:
        self.rectype = std_msgs.msg.String()
      if self.recver is None:
        self.recver = std_msgs.msg.String()
      if self.recsno is None:
        self.recsno = std_msgs.msg.String()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.del_ is None:
        self.del_ = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name.data = str[start:end].decode('utf-8')
      else:
        self.name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.marker.data = str[start:end].decode('utf-8')
      else:
        self.marker.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.antdes.data = str[start:end].decode('utf-8')
      else:
        self.antdes.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.antsno.data = str[start:end].decode('utf-8')
      else:
        self.antsno.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rectype.data = str[start:end].decode('utf-8')
      else:
        self.rectype.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recver.data = str[start:end].decode('utf-8')
      else:
        self.recver.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recsno.data = str[start:end].decode('utf-8')
      else:
        self.recsno.data = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.antsetup, _x.itrf, _x.deltype, _x.pos.x, _x.pos.y, _x.pos.z, _x.del_.x, _x.del_.y, _x.del_.z, _x.hgt,) = _struct_3i6dq.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.marker.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.antdes.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.antsno.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rectype.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.recver.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.recsno.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i6dq.pack(_x.antsetup, _x.itrf, _x.deltype, _x.pos.x, _x.pos.y, _x.pos.z, _x.del_.x, _x.del_.y, _x.del_.z, _x.hgt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.name is None:
        self.name = std_msgs.msg.String()
      if self.marker is None:
        self.marker = std_msgs.msg.String()
      if self.antdes is None:
        self.antdes = std_msgs.msg.String()
      if self.antsno is None:
        self.antsno = std_msgs.msg.String()
      if self.rectype is None:
        self.rectype = std_msgs.msg.String()
      if self.recver is None:
        self.recver = std_msgs.msg.String()
      if self.recsno is None:
        self.recsno = std_msgs.msg.String()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.del_ is None:
        self.del_ = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name.data = str[start:end].decode('utf-8')
      else:
        self.name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.marker.data = str[start:end].decode('utf-8')
      else:
        self.marker.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.antdes.data = str[start:end].decode('utf-8')
      else:
        self.antdes.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.antsno.data = str[start:end].decode('utf-8')
      else:
        self.antsno.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rectype.data = str[start:end].decode('utf-8')
      else:
        self.rectype.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recver.data = str[start:end].decode('utf-8')
      else:
        self.recver.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recsno.data = str[start:end].decode('utf-8')
      else:
        self.recsno.data = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.antsetup, _x.itrf, _x.deltype, _x.pos.x, _x.pos.y, _x.pos.z, _x.del_.x, _x.del_.y, _x.del_.z, _x.hgt,) = _struct_3i6dq.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i6dq = struct.Struct("<3i6dq")
