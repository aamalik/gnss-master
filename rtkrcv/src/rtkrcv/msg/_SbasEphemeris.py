"""autogenerated by genpy from rtkrcv/SbasEphemeris.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class SbasEphemeris(genpy.Message):
  _md5sum = "40f5d361177a2ebb573aec7e53721180"
  _type = "rtkrcv/SbasEphemeris"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# SBAS ephemeris type

int32 sat                       # satellite number
time t0                         # reference epoch time (GPST)
time tof                        # time of message frame (GPST)
int32 sva                       # SV accuracy (URA index)
int32 svh                       # SV health (0:ok)

geometry_msgs/Vector3 pos       # satellite position (m) (ecef)
geometry_msgs/Vector3 vel       # satellite velocity (m/s) (ecef)
geometry_msgs/Vector3 acc       # satellite acceleration (m/s^2) (ecef)
float64 af0                     # satellite clock-offset (s,s/s)
float64 af1                     # satellite drift (s,s/s)
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['sat','t0','tof','sva','svh','pos','vel','acc','af0','af1']
  _slot_types = ['int32','time','time','int32','int32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sat,t0,tof,sva,svh,pos,vel,acc,af0,af1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbasEphemeris, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sat is None:
        self.sat = 0
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      if self.sva is None:
        self.sva = 0
      if self.svh is None:
        self.svh = 0
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.af0 is None:
        self.af0 = 0.
      if self.af1 is None:
        self.af1 = 0.
    else:
      self.sat = 0
      self.t0 = genpy.Time()
      self.tof = genpy.Time()
      self.sva = 0
      self.svh = 0
      self.pos = geometry_msgs.msg.Vector3()
      self.vel = geometry_msgs.msg.Vector3()
      self.acc = geometry_msgs.msg.Vector3()
      self.af0 = 0.
      self.af1 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i4I2i11d.pack(_x.sat, _x.t0.secs, _x.t0.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sva, _x.svh, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.af0, _x.af1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 116
      (_x.sat, _x.t0.secs, _x.t0.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sva, _x.svh, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.af0, _x.af1,) = _struct_i4I2i11d.unpack(str[start:end])
      self.t0.canon()
      self.tof.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i4I2i11d.pack(_x.sat, _x.t0.secs, _x.t0.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sva, _x.svh, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.af0, _x.af1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 116
      (_x.sat, _x.t0.secs, _x.t0.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sva, _x.svh, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.af0, _x.af1,) = _struct_i4I2i11d.unpack(str[start:end])
      self.t0.canon()
      self.tof.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i4I2i11d = struct.Struct("<i4I2i11d")
