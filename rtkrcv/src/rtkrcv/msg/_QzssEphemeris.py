"""autogenerated by genpy from rtkrcv/QzssEphemeris.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class QzssEphemeris(genpy.Message):
  _md5sum = "198daafc411df6ff6ceeae411672fe18"
  _type = "rtkrcv/QzssEphemeris"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# QZSS LEX ephemeris type

time toe                             # epoch time (GPST)
time tof                             # message frame time (GPST)

int32 sat                            # satellite
uint8 health                         # signal health (L1,L2,L1C,L5,LEX)
uint8 ura                            # URA index

geometry_msgs/Vector3  pos           # satellite position (m)
geometry_msgs/Vector3  vel           # satellite velocity (m/s)
geometry_msgs/Vector3  acc           # satellite acceleration (m/s2)
geometry_msgs/Vector3  jerk          # satellite jerk (m/s3)
float64 af0                          # satellite clock bias
float64 af1                          # satellite clock drift (s,s/s)
float64 tgd                          # TGD
float64[] isc                        # ISC
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['toe','tof','sat','health','ura','pos','vel','acc','jerk','af0','af1','tgd','isc']
  _slot_types = ['time','time','int32','uint8','uint8','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','float64','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       toe,tof,sat,health,ura,pos,vel,acc,jerk,af0,af1,tgd,isc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QzssEphemeris, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.toe is None:
        self.toe = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      if self.sat is None:
        self.sat = 0
      if self.health is None:
        self.health = 0
      if self.ura is None:
        self.ura = 0
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      if self.af0 is None:
        self.af0 = 0.
      if self.af1 is None:
        self.af1 = 0.
      if self.tgd is None:
        self.tgd = 0.
      if self.isc is None:
        self.isc = []
    else:
      self.toe = genpy.Time()
      self.tof = genpy.Time()
      self.sat = 0
      self.health = 0
      self.ura = 0
      self.pos = geometry_msgs.msg.Vector3()
      self.vel = geometry_msgs.msg.Vector3()
      self.acc = geometry_msgs.msg.Vector3()
      self.jerk = geometry_msgs.msg.Vector3()
      self.af0 = 0.
      self.af1 = 0.
      self.tgd = 0.
      self.isc = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4Ii2B15d.pack(_x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sat, _x.health, _x.ura, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.af0, _x.af1, _x.tgd))
      length = len(self.isc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.isc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.toe is None:
        self.toe = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 142
      (_x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sat, _x.health, _x.ura, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.af0, _x.af1, _x.tgd,) = _struct_4Ii2B15d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.isc = struct.unpack(pattern, str[start:end])
      self.toe.canon()
      self.tof.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4Ii2B15d.pack(_x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sat, _x.health, _x.ura, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.af0, _x.af1, _x.tgd))
      length = len(self.isc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.isc.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.toe is None:
        self.toe = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      if self.pos is None:
        self.pos = geometry_msgs.msg.Vector3()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Vector3()
      if self.acc is None:
        self.acc = geometry_msgs.msg.Vector3()
      if self.jerk is None:
        self.jerk = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 142
      (_x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.sat, _x.health, _x.ura, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.acc.x, _x.acc.y, _x.acc.z, _x.jerk.x, _x.jerk.y, _x.jerk.z, _x.af0, _x.af1, _x.tgd,) = _struct_4Ii2B15d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.isc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      self.toe.canon()
      self.tof.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4Ii2B15d = struct.Struct("<4Ii2B15d")
