"""autogenerated by genpy from rtkrcv/sbsion_t.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import rtkrcv.msg

class sbsion_t(genpy.Message):
  _md5sum = "2132e51ac392772d571f82add58ab6a6"
  _type = "rtkrcv/sbsion_t"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# SBAS ionospheric corrections type

int32 iodi                 # IODI (issue of date ionos corr)
int32 nigp                 # number of igps
sbsigp_t[] igp             # ionospheric correction
================================================================================
MSG: rtkrcv/sbsigp_t
# SBAS ionospheric correction type

time t0               # correction time
int16 lat             # latitude (deg)
int16 lon             # longitude (deg)
int16 give            # GIVI+1
float32 delay         # vertical delay estimate (m)
"""
  __slots__ = ['iodi','nigp','igp']
  _slot_types = ['int32','int32','rtkrcv/sbsigp_t[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       iodi,nigp,igp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sbsion_t, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.iodi is None:
        self.iodi = 0
      if self.nigp is None:
        self.nigp = 0
      if self.igp is None:
        self.igp = []
    else:
      self.iodi = 0
      self.nigp = 0
      self.igp = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.iodi, _x.nigp))
      length = len(self.igp)
      buff.write(_struct_I.pack(length))
      for val1 in self.igp:
        _v1 = val1.t0
        _x = _v1
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_struct_3hf.pack(_x.lat, _x.lon, _x.give, _x.delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.igp is None:
        self.igp = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.iodi, _x.nigp,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.igp = []
      for i in range(0, length):
        val1 = rtkrcv.msg.sbsigp_t()
        _v2 = val1.t0
        _x = _v2
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.lat, _x.lon, _x.give, _x.delay,) = _struct_3hf.unpack(str[start:end])
        self.igp.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.iodi, _x.nigp))
      length = len(self.igp)
      buff.write(_struct_I.pack(length))
      for val1 in self.igp:
        _v3 = val1.t0
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_struct_3hf.pack(_x.lat, _x.lon, _x.give, _x.delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.igp is None:
        self.igp = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.iodi, _x.nigp,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.igp = []
      for i in range(0, length):
        val1 = rtkrcv.msg.sbsigp_t()
        _v4 = val1.t0
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        _x = val1
        start = end
        end += 10
        (_x.lat, _x.lon, _x.give, _x.delay,) = _struct_3hf.unpack(str[start:end])
        self.igp.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
_struct_3hf = struct.Struct("<3hf")
_struct_2I = struct.Struct("<2I")
