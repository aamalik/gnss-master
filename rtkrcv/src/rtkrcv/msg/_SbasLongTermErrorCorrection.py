"""autogenerated by genpy from rtkrcv/SbasLongTermErrorCorrection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy

class SbasLongTermErrorCorrection(genpy.Message):
  _md5sum = "4dadc3603f7423f2f0cd8571125e7ad7"
  _type = "rtkrcv/SbasLongTermErrorCorrection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# SBAS long term satellite error correction type

time t0                        # correction time
int32 iode                     # IODE (issue of date ephemeris)
geometry_msgs/Vector3 dpos     # delta position (m) (ecef)
geometry_msgs/Vector3 dvel     # delta velocity (m/s) (ecef)
float64 daf0                   # delta clock-offset(s,s/s)
float64 daf1s                  # delta drift (s,s/s)

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['t0','iode','dpos','dvel','daf0','daf1s']
  _slot_types = ['time','int32','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t0,iode,dpos,dvel,daf0,daf1s

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbasLongTermErrorCorrection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.iode is None:
        self.iode = 0
      if self.dpos is None:
        self.dpos = geometry_msgs.msg.Vector3()
      if self.dvel is None:
        self.dvel = geometry_msgs.msg.Vector3()
      if self.daf0 is None:
        self.daf0 = 0.
      if self.daf1s is None:
        self.daf1s = 0.
    else:
      self.t0 = genpy.Time()
      self.iode = 0
      self.dpos = geometry_msgs.msg.Vector3()
      self.dvel = geometry_msgs.msg.Vector3()
      self.daf0 = 0.
      self.daf1s = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Ii8d.pack(_x.t0.secs, _x.t0.nsecs, _x.iode, _x.dpos.x, _x.dpos.y, _x.dpos.z, _x.dvel.x, _x.dvel.y, _x.dvel.z, _x.daf0, _x.daf1s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.dpos is None:
        self.dpos = geometry_msgs.msg.Vector3()
      if self.dvel is None:
        self.dvel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.t0.secs, _x.t0.nsecs, _x.iode, _x.dpos.x, _x.dpos.y, _x.dpos.z, _x.dvel.x, _x.dvel.y, _x.dvel.z, _x.daf0, _x.daf1s,) = _struct_2Ii8d.unpack(str[start:end])
      self.t0.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Ii8d.pack(_x.t0.secs, _x.t0.nsecs, _x.iode, _x.dpos.x, _x.dpos.y, _x.dpos.z, _x.dvel.x, _x.dvel.y, _x.dvel.z, _x.daf0, _x.daf1s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.t0 is None:
        self.t0 = genpy.Time()
      if self.dpos is None:
        self.dpos = geometry_msgs.msg.Vector3()
      if self.dvel is None:
        self.dvel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.t0.secs, _x.t0.nsecs, _x.iode, _x.dpos.x, _x.dpos.y, _x.dpos.z, _x.dvel.x, _x.dvel.y, _x.dvel.z, _x.daf0, _x.daf1s,) = _struct_2Ii8d.unpack(str[start:end])
      self.t0.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Ii8d = struct.Struct("<2Ii8d")
