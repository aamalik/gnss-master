/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/lam.msg */
#ifndef RTKRCV_MESSAGE_LAM_H
#define RTKRCV_MESSAGE_LAM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct lam_ {
  typedef lam_<ContainerAllocator> Type;

  lam_()
  : L1(0.0)
  , L2(0.0)
  , L5(0.0)
  , L6(0.0)
  , L7(0.0)
  , L8(0.0)
  {
  }

  lam_(const ContainerAllocator& _alloc)
  : L1(0.0)
  , L2(0.0)
  , L5(0.0)
  , L6(0.0)
  , L7(0.0)
  , L8(0.0)
  {
  }

  typedef double _L1_type;
  double L1;

  typedef double _L2_type;
  double L2;

  typedef double _L5_type;
  double L5;

  typedef double _L6_type;
  double L6;

  typedef double _L7_type;
  double L7;

  typedef double _L8_type;
  double L8;


  typedef boost::shared_ptr< ::rtkrcv::lam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::lam_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct lam
typedef  ::rtkrcv::lam_<std::allocator<void> > lam;

typedef boost::shared_ptr< ::rtkrcv::lam> lamPtr;
typedef boost::shared_ptr< ::rtkrcv::lam const> lamConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::lam_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::lam_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::lam_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::lam_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::lam_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0e5d8dc29bcb26f90e5ef349923e14be";
  }

  static const char* value(const  ::rtkrcv::lam_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0e5d8dc29bcb26f9ULL;
  static const uint64_t static_value2 = 0x0e5ef349923e14beULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::lam_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/lam";
  }

  static const char* value(const  ::rtkrcv::lam_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::lam_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Datatype for lam message type (carrier wave lengths (m) )\n\
\n\
float64 L1\n\
float64 L2\n\
float64 L5\n\
float64 L6\n\
float64 L7\n\
float64 L8\n\
\n\
";
  }

  static const char* value(const  ::rtkrcv::lam_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::lam_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::lam_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.L1);
    stream.next(m.L2);
    stream.next(m.L5);
    stream.next(m.L6);
    stream.next(m.L7);
    stream.next(m.L8);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct lam_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::lam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::lam_<ContainerAllocator> & v) 
  {
    s << indent << "L1: ";
    Printer<double>::stream(s, indent + "  ", v.L1);
    s << indent << "L2: ";
    Printer<double>::stream(s, indent + "  ", v.L2);
    s << indent << "L5: ";
    Printer<double>::stream(s, indent + "  ", v.L5);
    s << indent << "L6: ";
    Printer<double>::stream(s, indent + "  ", v.L6);
    s << indent << "L7: ";
    Printer<double>::stream(s, indent + "  ", v.L7);
    s << indent << "L8: ";
    Printer<double>::stream(s, indent + "  ", v.L8);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_LAM_H

