/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/cbias.msg */
#ifndef RTKRCV_MESSAGE_CBIAS_H
#define RTKRCV_MESSAGE_CBIAS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct cbias_ {
  typedef cbias_<ContainerAllocator> Type;

  cbias_()
  : p1_p2(0.0)
  , p1_c1(0.0)
  , p2_c2(0.0)
  {
  }

  cbias_(const ContainerAllocator& _alloc)
  : p1_p2(0.0)
  , p1_c1(0.0)
  , p2_c2(0.0)
  {
  }

  typedef double _p1_p2_type;
  double p1_p2;

  typedef double _p1_c1_type;
  double p1_c1;

  typedef double _p2_c2_type;
  double p2_c2;


  typedef boost::shared_ptr< ::rtkrcv::cbias_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::cbias_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct cbias
typedef  ::rtkrcv::cbias_<std::allocator<void> > cbias;

typedef boost::shared_ptr< ::rtkrcv::cbias> cbiasPtr;
typedef boost::shared_ptr< ::rtkrcv::cbias const> cbiasConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::cbias_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::cbias_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::cbias_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::cbias_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::cbias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "821a1a42ff1f270ad9a3e3a38516de2d";
  }

  static const char* value(const  ::rtkrcv::cbias_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x821a1a42ff1f270aULL;
  static const uint64_t static_value2 = 0xd9a3e3a38516de2dULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::cbias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/cbias";
  }

  static const char* value(const  ::rtkrcv::cbias_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::cbias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# code bias (0:p1-p2,1:p1-c1,2:p2-c2) (m)\n\
\n\
float64 p1_p2\n\
float64 p1_c1\n\
float64 p2_c2\n\
";
  }

  static const char* value(const  ::rtkrcv::cbias_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::cbias_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::cbias_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.p1_p2);
    stream.next(m.p1_c1);
    stream.next(m.p2_c2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct cbias_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::cbias_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::cbias_<ContainerAllocator> & v) 
  {
    s << indent << "p1_p2: ";
    Printer<double>::stream(s, indent + "  ", v.p1_p2);
    s << indent << "p1_c1: ";
    Printer<double>::stream(s, indent + "  ", v.p1_c1);
    s << indent << "p2_c2: ";
    Printer<double>::stream(s, indent + "  ", v.p2_c2);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_CBIAS_H

