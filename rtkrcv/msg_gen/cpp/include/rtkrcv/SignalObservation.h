/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/SignalObservation.msg */
#ifndef RTKRCV_MESSAGE_SIGNALOBSERVATION_H
#define RTKRCV_MESSAGE_SIGNALOBSERVATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct SignalObservation_ {
  typedef SignalObservation_<ContainerAllocator> Type;

  SignalObservation_()
  : snr(0)
  , lli(0)
  , sig_code(0)
  , carrier_phase(0.0)
  , pseudorange(0.0)
  , doppler(0.0)
  {
  }

  SignalObservation_(const ContainerAllocator& _alloc)
  : snr(0)
  , lli(0)
  , sig_code(0)
  , carrier_phase(0.0)
  , pseudorange(0.0)
  , doppler(0.0)
  {
  }

  typedef uint8_t _snr_type;
  uint8_t snr;

  typedef uint8_t _lli_type;
  uint8_t lli;

  typedef uint8_t _sig_code_type;
  uint8_t sig_code;

  typedef double _carrier_phase_type;
  double carrier_phase;

  typedef double _pseudorange_type;
  double pseudorange;

  typedef float _doppler_type;
  float doppler;

  enum { SIG_CODE_NONE = 0 };
  enum { SIG_CODE_L1C = 1 };
  enum { SIG_CODE_L1P = 2 };
  enum { SIG_CODE_L1W = 3 };
  enum { SIG_CODE_L1Y = 4 };
  enum { SIG_CODE_L1M = 5 };
  enum { SIG_CODE_L1N = 6 };
  enum { SIG_CODE_L1S = 7 };
  enum { SIG_CODE_L1L = 8 };
  enum { SIG_CODE_L1E = 9 };
  enum { SIG_CODE_L1A = 10 };
  enum { SIG_CODE_L1B = 11 };
  enum { SIG_CODE_L1X = 12 };
  enum { SIG_CODE_L1Z = 13 };
  enum { SIG_CODE_L2C = 14 };
  enum { SIG_CODE_L2D = 15 };
  enum { SIG_CODE_L2S = 16 };
  enum { SIG_CODE_L2L = 17 };
  enum { SIG_CODE_L2X = 18 };
  enum { SIG_CODE_L2P = 19 };
  enum { SIG_CODE_L2W = 20 };
  enum { SIG_CODE_L2Y = 21 };
  enum { SIG_CODE_L2M = 22 };
  enum { SIG_CODE_L2N = 23 };
  enum { SIG_CODE_L5I = 24 };
  enum { SIG_CODE_L5Q = 25 };
  enum { SIG_CODE_L5X = 26 };
  enum { SIG_CODE_L7I = 27 };
  enum { SIG_CODE_L7Q = 28 };
  enum { SIG_CODE_L7X = 29 };
  enum { SIG_CODE_L6A = 30 };
  enum { SIG_CODE_L6B = 31 };
  enum { SIG_CODE_L6C = 32 };
  enum { SIG_CODE_L6X = 33 };
  enum { SIG_CODE_L6Z = 34 };
  enum { SIG_CODE_L6S = 35 };
  enum { SIG_CODE_L6L = 36 };
  enum { SIG_CODE_L8I = 37 };
  enum { SIG_CODE_L8Q = 38 };
  enum { SIG_CODE_L8X = 39 };
  enum { MAXSIGCODE = 39 };

  typedef boost::shared_ptr< ::rtkrcv::SignalObservation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::SignalObservation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SignalObservation
typedef  ::rtkrcv::SignalObservation_<std::allocator<void> > SignalObservation;

typedef boost::shared_ptr< ::rtkrcv::SignalObservation> SignalObservationPtr;
typedef boost::shared_ptr< ::rtkrcv::SignalObservation const> SignalObservationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::SignalObservation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::SignalObservation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SignalObservation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SignalObservation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::SignalObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14a56f525e59be7564f63947c358c1cf";
  }

  static const char* value(const  ::rtkrcv::SignalObservation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14a56f525e59be75ULL;
  static const uint64_t static_value2 = 0x64f63947c358c1cfULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::SignalObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/SignalObservation";
  }

  static const char* value(const  ::rtkrcv::SignalObservation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::SignalObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Signal to noise ratio (0.25 dBHz)\n\
uint8 snr\n\
#Loss of lock indicator\n\
uint8 lli\n\
#Code indicator\n\
uint8 sig_code\n\
#Observation data carrier-phase (cycle)\n\
float64 carrier_phase\n\
#Observation data pseudorange (m)\n\
float64 pseudorange\n\
#Observation data doppler frequency (Hz)\n\
float32 doppler\n\
\n\
uint8 SIG_CODE_NONE = 0     # obs code: none or unknown\n\
uint8 SIG_CODE_L1C  = 1     # obs code: L1C/A,E1C  (GPS,GLO,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L1P  = 2     # obs code: L1P        (GPS,GLO)\n\
uint8 SIG_CODE_L1W  = 3     # obs code: L1 Z-track (GPS)\n\
uint8 SIG_CODE_L1Y  = 4     # obs code: L1Y        (GPS)\n\
uint8 SIG_CODE_L1M  = 5     # obs code: L1M        (GPS)\n\
uint8 SIG_CODE_L1N  = 6     # obs code: L1codeless (GPS)\n\
uint8 SIG_CODE_L1S  = 7     # obs code: L1C(D)     (GPS,QZS)\n\
uint8 SIG_CODE_L1L  = 8     # obs code: L1C(P)     (GPS,QZS)\n\
uint8 SIG_CODE_L1E  = 9     # obs code: L1-SAIF    (QZS)\n\
uint8 SIG_CODE_L1A  = 10    # obs code: E1A        (GAL)\n\
uint8 SIG_CODE_L1B  = 11    # obs code: E1B        (GAL)\n\
uint8 SIG_CODE_L1X  = 12    # obs code: E1B+C,L1C(D+P) (GAL,QZS)\n\
uint8 SIG_CODE_L1Z  = 13    # obs code: E1A+B+C    (GAL)\n\
uint8 SIG_CODE_L2C  = 14    # obs code: L2C/A      (GPS,GLO)\n\
uint8 SIG_CODE_L2D  = 15    # obs code: L2 L1C/A-(P2-P1) (GPS)\n\
uint8 SIG_CODE_L2S  = 16    # obs code: L2C(M)     (GPS,QZS)\n\
uint8 SIG_CODE_L2L  = 17    # obs code: L2C(L)     (GPS,QZS)\n\
uint8 SIG_CODE_L2X  = 18    # obs code: L2C(M+L)   (GPS,QZS)\n\
uint8 SIG_CODE_L2P  = 19    # obs code: L2P        (GPS,GLO)\n\
uint8 SIG_CODE_L2W  = 20    # obs code: L2 Z-track (GPS)\n\
uint8 SIG_CODE_L2Y  = 21    # obs code: L2Y        (GPS)\n\
uint8 SIG_CODE_L2M  = 22    # obs code: L2M        (GPS)\n\
uint8 SIG_CODE_L2N  = 23    # obs code: L2codeless (GPS)\n\
uint8 SIG_CODE_L5I  = 24    # obs code: L5/E5aI    (GPS,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L5Q  = 25    # obs code: L5/E5aQ    (GPS,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L5X  = 26    # obs code: L5/E5aI+Q  (GPS,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L7I  = 27    # obs code: E5bI       (GAL)\n\
uint8 SIG_CODE_L7Q  = 28    # obs code: E5bQ       (GAL)\n\
uint8 SIG_CODE_L7X  = 29    # obs code: E5bI+Q     (GAL)\n\
uint8 SIG_CODE_L6A  = 30    # obs code: E6A        (GAL)\n\
uint8 SIG_CODE_L6B  = 31    # obs code: E6B        (GAL)\n\
uint8 SIG_CODE_L6C  = 32    # obs code: E6C        (GAL)\n\
uint8 SIG_CODE_L6X  = 33    # obs code: E6B+C      (GAL)\n\
uint8 SIG_CODE_L6Z  = 34    # obs code: E6A+B+C    (GAL)\n\
uint8 SIG_CODE_L6S  = 35    # obs code: LEX-S      (QZS)\n\
uint8 SIG_CODE_L6L  = 36    # obs code: LEX-L      (QZS)\n\
uint8 SIG_CODE_L8I  = 37    # obs code: E5(a+b)I   (GAL)\n\
uint8 SIG_CODE_L8Q  = 38    # obs code: E5(a+b)Q   (GAL)\n\
uint8 SIG_CODE_L8X  = 39    # obs code: E5(a+b)I+Q (GAL)\n\
uint8 MAXSIGCODE   = 39    # max number of obs code\n\
";
  }

  static const char* value(const  ::rtkrcv::SignalObservation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::SignalObservation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::SignalObservation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.snr);
    stream.next(m.lli);
    stream.next(m.sig_code);
    stream.next(m.carrier_phase);
    stream.next(m.pseudorange);
    stream.next(m.doppler);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SignalObservation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::SignalObservation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::SignalObservation_<ContainerAllocator> & v) 
  {
    s << indent << "snr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.snr);
    s << indent << "lli: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lli);
    s << indent << "sig_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sig_code);
    s << indent << "carrier_phase: ";
    Printer<double>::stream(s, indent + "  ", v.carrier_phase);
    s << indent << "pseudorange: ";
    Printer<double>::stream(s, indent + "  ", v.pseudorange);
    s << indent << "doppler: ";
    Printer<float>::stream(s, indent + "  ", v.doppler);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_SIGNALOBSERVATION_H

