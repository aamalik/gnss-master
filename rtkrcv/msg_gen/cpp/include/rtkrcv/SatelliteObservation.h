/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/SatelliteObservation.msg */
#ifndef RTKRCV_MESSAGE_SATELLITEOBSERVATION_H
#define RTKRCV_MESSAGE_SATELLITEOBSERVATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "rtkrcv/SignalObservation.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct SatelliteObservation_ {
  typedef SatelliteObservation_<ContainerAllocator> Type;

  SatelliteObservation_()
  : header()
  , sat(0)
  , observations()
  {
  }

  SatelliteObservation_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , sat(0)
  , observations(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _sat_type;
  uint8_t sat;

  typedef std::vector< ::rtkrcv::SignalObservation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::SignalObservation_<ContainerAllocator> >::other >  _observations_type;
  std::vector< ::rtkrcv::SignalObservation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::SignalObservation_<ContainerAllocator> >::other >  observations;


  typedef boost::shared_ptr< ::rtkrcv::SatelliteObservation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::SatelliteObservation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SatelliteObservation
typedef  ::rtkrcv::SatelliteObservation_<std::allocator<void> > SatelliteObservation;

typedef boost::shared_ptr< ::rtkrcv::SatelliteObservation> SatelliteObservationPtr;
typedef boost::shared_ptr< ::rtkrcv::SatelliteObservation const> SatelliteObservationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::SatelliteObservation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::SatelliteObservation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SatelliteObservation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SatelliteObservation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::SatelliteObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd47f98000c5ba9f9e14c23b35fabebd";
  }

  static const char* value(const  ::rtkrcv::SatelliteObservation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfd47f98000c5ba9fULL;
  static const uint64_t static_value2 = 0x9e14c23b35fabebdULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::SatelliteObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/SatelliteObservation";
  }

  static const char* value(const  ::rtkrcv::SatelliteObservation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::SatelliteObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Satellite observation\n\
Header header\n\
\n\
\n\
#Number of the satellite (1-32 for GPS)\n\
uint8 sat\n\
\n\
\n\
#Signal observations for different frequencies\n\
SignalObservation[] observations\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: rtkrcv/SignalObservation\n\
#Signal to noise ratio (0.25 dBHz)\n\
uint8 snr\n\
#Loss of lock indicator\n\
uint8 lli\n\
#Code indicator\n\
uint8 sig_code\n\
#Observation data carrier-phase (cycle)\n\
float64 carrier_phase\n\
#Observation data pseudorange (m)\n\
float64 pseudorange\n\
#Observation data doppler frequency (Hz)\n\
float32 doppler\n\
\n\
uint8 SIG_CODE_NONE = 0     # obs code: none or unknown\n\
uint8 SIG_CODE_L1C  = 1     # obs code: L1C/A,E1C  (GPS,GLO,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L1P  = 2     # obs code: L1P        (GPS,GLO)\n\
uint8 SIG_CODE_L1W  = 3     # obs code: L1 Z-track (GPS)\n\
uint8 SIG_CODE_L1Y  = 4     # obs code: L1Y        (GPS)\n\
uint8 SIG_CODE_L1M  = 5     # obs code: L1M        (GPS)\n\
uint8 SIG_CODE_L1N  = 6     # obs code: L1codeless (GPS)\n\
uint8 SIG_CODE_L1S  = 7     # obs code: L1C(D)     (GPS,QZS)\n\
uint8 SIG_CODE_L1L  = 8     # obs code: L1C(P)     (GPS,QZS)\n\
uint8 SIG_CODE_L1E  = 9     # obs code: L1-SAIF    (QZS)\n\
uint8 SIG_CODE_L1A  = 10    # obs code: E1A        (GAL)\n\
uint8 SIG_CODE_L1B  = 11    # obs code: E1B        (GAL)\n\
uint8 SIG_CODE_L1X  = 12    # obs code: E1B+C,L1C(D+P) (GAL,QZS)\n\
uint8 SIG_CODE_L1Z  = 13    # obs code: E1A+B+C    (GAL)\n\
uint8 SIG_CODE_L2C  = 14    # obs code: L2C/A      (GPS,GLO)\n\
uint8 SIG_CODE_L2D  = 15    # obs code: L2 L1C/A-(P2-P1) (GPS)\n\
uint8 SIG_CODE_L2S  = 16    # obs code: L2C(M)     (GPS,QZS)\n\
uint8 SIG_CODE_L2L  = 17    # obs code: L2C(L)     (GPS,QZS)\n\
uint8 SIG_CODE_L2X  = 18    # obs code: L2C(M+L)   (GPS,QZS)\n\
uint8 SIG_CODE_L2P  = 19    # obs code: L2P        (GPS,GLO)\n\
uint8 SIG_CODE_L2W  = 20    # obs code: L2 Z-track (GPS)\n\
uint8 SIG_CODE_L2Y  = 21    # obs code: L2Y        (GPS)\n\
uint8 SIG_CODE_L2M  = 22    # obs code: L2M        (GPS)\n\
uint8 SIG_CODE_L2N  = 23    # obs code: L2codeless (GPS)\n\
uint8 SIG_CODE_L5I  = 24    # obs code: L5/E5aI    (GPS,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L5Q  = 25    # obs code: L5/E5aQ    (GPS,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L5X  = 26    # obs code: L5/E5aI+Q  (GPS,GAL,QZS,SBS)\n\
uint8 SIG_CODE_L7I  = 27    # obs code: E5bI       (GAL)\n\
uint8 SIG_CODE_L7Q  = 28    # obs code: E5bQ       (GAL)\n\
uint8 SIG_CODE_L7X  = 29    # obs code: E5bI+Q     (GAL)\n\
uint8 SIG_CODE_L6A  = 30    # obs code: E6A        (GAL)\n\
uint8 SIG_CODE_L6B  = 31    # obs code: E6B        (GAL)\n\
uint8 SIG_CODE_L6C  = 32    # obs code: E6C        (GAL)\n\
uint8 SIG_CODE_L6X  = 33    # obs code: E6B+C      (GAL)\n\
uint8 SIG_CODE_L6Z  = 34    # obs code: E6A+B+C    (GAL)\n\
uint8 SIG_CODE_L6S  = 35    # obs code: LEX-S      (QZS)\n\
uint8 SIG_CODE_L6L  = 36    # obs code: LEX-L      (QZS)\n\
uint8 SIG_CODE_L8I  = 37    # obs code: E5(a+b)I   (GAL)\n\
uint8 SIG_CODE_L8Q  = 38    # obs code: E5(a+b)Q   (GAL)\n\
uint8 SIG_CODE_L8X  = 39    # obs code: E5(a+b)I+Q (GAL)\n\
uint8 MAXSIGCODE   = 39    # max number of obs code\n\
";
  }

  static const char* value(const  ::rtkrcv::SatelliteObservation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rtkrcv::SatelliteObservation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rtkrcv::SatelliteObservation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::SatelliteObservation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.sat);
    stream.next(m.observations);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SatelliteObservation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::SatelliteObservation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::SatelliteObservation_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sat);
    s << indent << "observations[]" << std::endl;
    for (size_t i = 0; i < v.observations.size(); ++i)
    {
      s << indent << "  observations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::SignalObservation_<ContainerAllocator> >::stream(s, indent + "    ", v.observations[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_SATELLITEOBSERVATION_H

