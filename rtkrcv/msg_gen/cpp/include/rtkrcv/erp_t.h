/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/erp_t.msg */
#ifndef RTKRCV_MESSAGE_ERP_T_H
#define RTKRCV_MESSAGE_ERP_T_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rtkrcv/erpd_t.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct erp_t_ {
  typedef erp_t_<ContainerAllocator> Type;

  erp_t_()
  : data()
  {
  }

  erp_t_(const ContainerAllocator& _alloc)
  : data(_alloc)
  {
  }

  typedef std::vector< ::rtkrcv::erpd_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::erpd_t_<ContainerAllocator> >::other >  _data_type;
  std::vector< ::rtkrcv::erpd_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::erpd_t_<ContainerAllocator> >::other >  data;


  typedef boost::shared_ptr< ::rtkrcv::erp_t_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::erp_t_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct erp_t
typedef  ::rtkrcv::erp_t_<std::allocator<void> > erp_t;

typedef boost::shared_ptr< ::rtkrcv::erp_t> erp_tPtr;
typedef boost::shared_ptr< ::rtkrcv::erp_t const> erp_tConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::erp_t_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::erp_t_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::erp_t_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::erp_t_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::erp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f92506c5fa83c7103817a4617b01f94e";
  }

  static const char* value(const  ::rtkrcv::erp_t_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf92506c5fa83c710ULL;
  static const uint64_t static_value2 = 0x3817a4617b01f94eULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::erp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/erp_t";
  }

  static const char* value(const  ::rtkrcv::erp_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::erp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# earth rotation parameter type\n\
\n\
erpd_t[] data         # earth rotation parameter data\n\
================================================================================\n\
MSG: rtkrcv/erpd_t\n\
# earth rotation parameter data type\n\
\n\
float64 mjd                 # mjd (days)\n\
float64 xp\n\
float64 yp                  # pole offset (rad)\n\
float64 xpr\n\
float64 ypr                 # pole offset rate (rad/day)\n\
float64 ut1_utc             # ut1-utc (s)\n\
float64 lod                 # length of day (s/day)\n\
";
  }

  static const char* value(const  ::rtkrcv::erp_t_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::erp_t_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct erp_t_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::erp_t_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::erp_t_<ContainerAllocator> & v) 
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::erpd_t_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_ERP_T_H

