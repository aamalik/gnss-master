/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/sbssatp_t.msg */
#ifndef RTKRCV_MESSAGE_SBSSATP_T_H
#define RTKRCV_MESSAGE_SBSSATP_T_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rtkrcv/SbasFastCorrection.h"
#include "rtkrcv/SbasLongTermErrorCorrection.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct sbssatp_t_ {
  typedef sbssatp_t_<ContainerAllocator> Type;

  sbssatp_t_()
  : sat(0)
  , fcorr()
  , lcorr()
  {
  }

  sbssatp_t_(const ContainerAllocator& _alloc)
  : sat(0)
  , fcorr(_alloc)
  , lcorr(_alloc)
  {
  }

  typedef int32_t _sat_type;
  int32_t sat;

  typedef  ::rtkrcv::SbasFastCorrection_<ContainerAllocator>  _fcorr_type;
   ::rtkrcv::SbasFastCorrection_<ContainerAllocator>  fcorr;

  typedef  ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator>  _lcorr_type;
   ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator>  lcorr;


  typedef boost::shared_ptr< ::rtkrcv::sbssatp_t_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::sbssatp_t_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sbssatp_t
typedef  ::rtkrcv::sbssatp_t_<std::allocator<void> > sbssatp_t;

typedef boost::shared_ptr< ::rtkrcv::sbssatp_t> sbssatp_tPtr;
typedef boost::shared_ptr< ::rtkrcv::sbssatp_t const> sbssatp_tConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::sbssatp_t_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::sbssatp_t_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sbssatp_t_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sbssatp_t_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::sbssatp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4650f2d5bd674ec683ed24347dc0706f";
  }

  static const char* value(const  ::rtkrcv::sbssatp_t_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4650f2d5bd674ec6ULL;
  static const uint64_t static_value2 = 0x83ed24347dc0706fULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::sbssatp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/sbssatp_t";
  }

  static const char* value(const  ::rtkrcv::sbssatp_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::sbssatp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# SBAS satellite correction type\n\
\n\
int32 sat                                   # satellite number\n\
SbasFastCorrection fcorr                    # fast correction\n\
SbasLongTermErrorCorrection lcorr           # long term correction\n\
================================================================================\n\
MSG: rtkrcv/SbasFastCorrection\n\
# SBAS fast correction type\n\
\n\
time t0             # time of applicability (TOF)\n\
float64 prc         # pseudorange correction (PRC) (m)\n\
float64 rrc         # range-rate correction (RRC) (m/s)\n\
float64 dt          # range-rate correction delta-time (s)\n\
int32 iodf          # IODF (issue of date fast corr)\n\
int16 udre          # UDRE+1\n\
int16 ai            # degradation factor indicator\n\
================================================================================\n\
MSG: rtkrcv/SbasLongTermErrorCorrection\n\
# SBAS long term satellite error correction type\n\
\n\
time t0                        # correction time\n\
int32 iode                     # IODE (issue of date ephemeris)\n\
geometry_msgs/Vector3 dpos     # delta position (m) (ecef)\n\
geometry_msgs/Vector3 dvel     # delta velocity (m/s) (ecef)\n\
float64 daf0                   # delta clock-offset(s,s/s)\n\
float64 daf1s                  # delta drift (s,s/s)\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::rtkrcv::sbssatp_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::sbssatp_t_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::sbssatp_t_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sat);
    stream.next(m.fcorr);
    stream.next(m.lcorr);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sbssatp_t_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::sbssatp_t_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::sbssatp_t_<ContainerAllocator> & v) 
  {
    s << indent << "sat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sat);
    s << indent << "fcorr: ";
s << std::endl;
    Printer< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> >::stream(s, indent + "  ", v.fcorr);
    s << indent << "lcorr: ";
s << std::endl;
    Printer< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> >::stream(s, indent + "  ", v.lcorr);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_SBSSATP_T_H

