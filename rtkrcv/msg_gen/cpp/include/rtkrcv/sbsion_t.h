/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/sbsion_t.msg */
#ifndef RTKRCV_MESSAGE_SBSION_T_H
#define RTKRCV_MESSAGE_SBSION_T_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rtkrcv/sbsigp_t.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct sbsion_t_ {
  typedef sbsion_t_<ContainerAllocator> Type;

  sbsion_t_()
  : iodi(0)
  , nigp(0)
  , igp()
  {
  }

  sbsion_t_(const ContainerAllocator& _alloc)
  : iodi(0)
  , nigp(0)
  , igp(_alloc)
  {
  }

  typedef int32_t _iodi_type;
  int32_t iodi;

  typedef int32_t _nigp_type;
  int32_t nigp;

  typedef std::vector< ::rtkrcv::sbsigp_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::sbsigp_t_<ContainerAllocator> >::other >  _igp_type;
  std::vector< ::rtkrcv::sbsigp_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::sbsigp_t_<ContainerAllocator> >::other >  igp;


  typedef boost::shared_ptr< ::rtkrcv::sbsion_t_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::sbsion_t_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sbsion_t
typedef  ::rtkrcv::sbsion_t_<std::allocator<void> > sbsion_t;

typedef boost::shared_ptr< ::rtkrcv::sbsion_t> sbsion_tPtr;
typedef boost::shared_ptr< ::rtkrcv::sbsion_t const> sbsion_tConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::sbsion_t_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::sbsion_t_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sbsion_t_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sbsion_t_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::sbsion_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2132e51ac392772d571f82add58ab6a6";
  }

  static const char* value(const  ::rtkrcv::sbsion_t_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2132e51ac392772dULL;
  static const uint64_t static_value2 = 0x571f82add58ab6a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::sbsion_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/sbsion_t";
  }

  static const char* value(const  ::rtkrcv::sbsion_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::sbsion_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# SBAS ionospheric corrections type\n\
\n\
int32 iodi                 # IODI (issue of date ionos corr)\n\
int32 nigp                 # number of igps\n\
sbsigp_t[] igp             # ionospheric correction\n\
================================================================================\n\
MSG: rtkrcv/sbsigp_t\n\
# SBAS ionospheric correction type\n\
\n\
time t0               # correction time\n\
int16 lat             # latitude (deg)\n\
int16 lon             # longitude (deg)\n\
int16 give            # GIVI+1\n\
float32 delay         # vertical delay estimate (m)\n\
";
  }

  static const char* value(const  ::rtkrcv::sbsion_t_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::sbsion_t_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.iodi);
    stream.next(m.nigp);
    stream.next(m.igp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sbsion_t_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::sbsion_t_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::sbsion_t_<ContainerAllocator> & v) 
  {
    s << indent << "iodi: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iodi);
    s << indent << "nigp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nigp);
    s << indent << "igp[]" << std::endl;
    for (size_t i = 0; i < v.igp.size(); ++i)
    {
      s << indent << "  igp[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::sbsigp_t_<ContainerAllocator> >::stream(s, indent + "    ", v.igp[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_SBSION_T_H

