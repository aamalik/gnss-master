/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/sta_t.msg */
#ifndef RTKRCV_MESSAGE_STA_T_H
#define RTKRCV_MESSAGE_STA_T_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/String.h"
#include "std_msgs/String.h"
#include "std_msgs/String.h"
#include "std_msgs/String.h"
#include "std_msgs/String.h"
#include "std_msgs/String.h"
#include "std_msgs/String.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct sta_t_ {
  typedef sta_t_<ContainerAllocator> Type;

  sta_t_()
  : name()
  , marker()
  , antdes()
  , antsno()
  , rectype()
  , recver()
  , recsno()
  , antsetup(0)
  , itrf(0)
  , deltype(0)
  , pos()
  , del()
  , hgt(0)
  {
  }

  sta_t_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , marker(_alloc)
  , antdes(_alloc)
  , antsno(_alloc)
  , rectype(_alloc)
  , recver(_alloc)
  , recsno(_alloc)
  , antsetup(0)
  , itrf(0)
  , deltype(0)
  , pos(_alloc)
  , del(_alloc)
  , hgt(0)
  {
  }

  typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
   ::std_msgs::String_<ContainerAllocator>  name;

  typedef  ::std_msgs::String_<ContainerAllocator>  _marker_type;
   ::std_msgs::String_<ContainerAllocator>  marker;

  typedef  ::std_msgs::String_<ContainerAllocator>  _antdes_type;
   ::std_msgs::String_<ContainerAllocator>  antdes;

  typedef  ::std_msgs::String_<ContainerAllocator>  _antsno_type;
   ::std_msgs::String_<ContainerAllocator>  antsno;

  typedef  ::std_msgs::String_<ContainerAllocator>  _rectype_type;
   ::std_msgs::String_<ContainerAllocator>  rectype;

  typedef  ::std_msgs::String_<ContainerAllocator>  _recver_type;
   ::std_msgs::String_<ContainerAllocator>  recver;

  typedef  ::std_msgs::String_<ContainerAllocator>  _recsno_type;
   ::std_msgs::String_<ContainerAllocator>  recsno;

  typedef int32_t _antsetup_type;
  int32_t antsetup;

  typedef int32_t _itrf_type;
  int32_t itrf;

  typedef int32_t _deltype_type;
  int32_t deltype;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  pos;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _del_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  del;

  typedef int64_t _hgt_type;
  int64_t hgt;


  typedef boost::shared_ptr< ::rtkrcv::sta_t_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::sta_t_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sta_t
typedef  ::rtkrcv::sta_t_<std::allocator<void> > sta_t;

typedef boost::shared_ptr< ::rtkrcv::sta_t> sta_tPtr;
typedef boost::shared_ptr< ::rtkrcv::sta_t const> sta_tConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::sta_t_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::sta_t_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sta_t_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sta_t_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::sta_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f30681337a9aca787ae7f969e9464469";
  }

  static const char* value(const  ::rtkrcv::sta_t_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf30681337a9aca78ULL;
  static const uint64_t static_value2 = 0x7ae7f969e9464469ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::sta_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/sta_t";
  }

  static const char* value(const  ::rtkrcv::sta_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::sta_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# station parameter type\n\
\n\
std_msgs/String name           # marker name\n\
std_msgs/String marker         # marker number\n\
std_msgs/String antdes         # antenna descriptor\n\
std_msgs/String antsno         # antenna serial number\n\
std_msgs/String rectype        # receiver type descriptor\n\
std_msgs/String recver         # receiver firmware version\n\
std_msgs/String recsno         # receiver serial number\n\
\n\
int32 antsetup                 # antenna setup id\n\
int32 itrf                     # ITRF realization year\n\
int32 deltype                  # antenna delta type (0:enu,1:xyz)\n\
\n\
geometry_msgs/Vector3 pos      # station position (ecef) (m)\n\
geometry_msgs/Vector3 del      # antenna position delta (e/n/u or x/y/z) (m)\n\
int64 hgt                      # antenna height (m)\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::rtkrcv::sta_t_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::sta_t_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.marker);
    stream.next(m.antdes);
    stream.next(m.antsno);
    stream.next(m.rectype);
    stream.next(m.recver);
    stream.next(m.recsno);
    stream.next(m.antsetup);
    stream.next(m.itrf);
    stream.next(m.deltype);
    stream.next(m.pos);
    stream.next(m.del);
    stream.next(m.hgt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sta_t_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::sta_t_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::sta_t_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "marker: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.marker);
    s << indent << "antdes: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.antdes);
    s << indent << "antsno: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.antsno);
    s << indent << "rectype: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.rectype);
    s << indent << "recver: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.recver);
    s << indent << "recsno: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.recsno);
    s << indent << "antsetup: ";
    Printer<int32_t>::stream(s, indent + "  ", v.antsetup);
    s << indent << "itrf: ";
    Printer<int32_t>::stream(s, indent + "  ", v.itrf);
    s << indent << "deltype: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltype);
    s << indent << "pos: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "del: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.del);
    s << indent << "hgt: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hgt);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_STA_T_H

