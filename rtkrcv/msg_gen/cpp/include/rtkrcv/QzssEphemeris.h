/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/QzssEphemeris.msg */
#ifndef RTKRCV_MESSAGE_QZSSEPHEMERIS_H
#define RTKRCV_MESSAGE_QZSSEPHEMERIS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct QzssEphemeris_ {
  typedef QzssEphemeris_<ContainerAllocator> Type;

  QzssEphemeris_()
  : toe()
  , tof()
  , sat(0)
  , health(0)
  , ura(0)
  , pos()
  , vel()
  , acc()
  , jerk()
  , af0(0.0)
  , af1(0.0)
  , tgd(0.0)
  , isc()
  {
  }

  QzssEphemeris_(const ContainerAllocator& _alloc)
  : toe()
  , tof()
  , sat(0)
  , health(0)
  , ura(0)
  , pos(_alloc)
  , vel(_alloc)
  , acc(_alloc)
  , jerk(_alloc)
  , af0(0.0)
  , af1(0.0)
  , tgd(0.0)
  , isc(_alloc)
  {
  }

  typedef ros::Time _toe_type;
  ros::Time toe;

  typedef ros::Time _tof_type;
  ros::Time tof;

  typedef int32_t _sat_type;
  int32_t sat;

  typedef uint8_t _health_type;
  uint8_t health;

  typedef uint8_t _ura_type;
  uint8_t ura;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  pos;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  vel;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  acc;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _jerk_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  jerk;

  typedef double _af0_type;
  double af0;

  typedef double _af1_type;
  double af1;

  typedef double _tgd_type;
  double tgd;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _isc_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  isc;


  typedef boost::shared_ptr< ::rtkrcv::QzssEphemeris_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::QzssEphemeris_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QzssEphemeris
typedef  ::rtkrcv::QzssEphemeris_<std::allocator<void> > QzssEphemeris;

typedef boost::shared_ptr< ::rtkrcv::QzssEphemeris> QzssEphemerisPtr;
typedef boost::shared_ptr< ::rtkrcv::QzssEphemeris const> QzssEphemerisConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::QzssEphemeris_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::QzssEphemeris_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::QzssEphemeris_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::QzssEphemeris_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::QzssEphemeris_<ContainerAllocator> > {
  static const char* value() 
  {
    return "198daafc411df6ff6ceeae411672fe18";
  }

  static const char* value(const  ::rtkrcv::QzssEphemeris_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x198daafc411df6ffULL;
  static const uint64_t static_value2 = 0x6ceeae411672fe18ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::QzssEphemeris_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/QzssEphemeris";
  }

  static const char* value(const  ::rtkrcv::QzssEphemeris_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::QzssEphemeris_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# QZSS LEX ephemeris type\n\
\n\
time toe                             # epoch time (GPST)\n\
time tof                             # message frame time (GPST)\n\
\n\
int32 sat                            # satellite\n\
uint8 health                         # signal health (L1,L2,L1C,L5,LEX)\n\
uint8 ura                            # URA index\n\
\n\
geometry_msgs/Vector3  pos           # satellite position (m)\n\
geometry_msgs/Vector3  vel           # satellite velocity (m/s)\n\
geometry_msgs/Vector3  acc           # satellite acceleration (m/s2)\n\
geometry_msgs/Vector3  jerk          # satellite jerk (m/s3)\n\
float64 af0                          # satellite clock bias\n\
float64 af1                          # satellite clock drift (s,s/s)\n\
float64 tgd                          # TGD\n\
float64[] isc                        # ISC\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::rtkrcv::QzssEphemeris_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::QzssEphemeris_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.toe);
    stream.next(m.tof);
    stream.next(m.sat);
    stream.next(m.health);
    stream.next(m.ura);
    stream.next(m.pos);
    stream.next(m.vel);
    stream.next(m.acc);
    stream.next(m.jerk);
    stream.next(m.af0);
    stream.next(m.af1);
    stream.next(m.tgd);
    stream.next(m.isc);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QzssEphemeris_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::QzssEphemeris_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::QzssEphemeris_<ContainerAllocator> & v) 
  {
    s << indent << "toe: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.toe);
    s << indent << "tof: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.tof);
    s << indent << "sat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sat);
    s << indent << "health: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.health);
    s << indent << "ura: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ura);
    s << indent << "pos: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "acc: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "jerk: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.jerk);
    s << indent << "af0: ";
    Printer<double>::stream(s, indent + "  ", v.af0);
    s << indent << "af1: ";
    Printer<double>::stream(s, indent + "  ", v.af1);
    s << indent << "tgd: ";
    Printer<double>::stream(s, indent + "  ", v.tgd);
    s << indent << "isc[]" << std::endl;
    for (size_t i = 0; i < v.isc.size(); ++i)
    {
      s << indent << "  isc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.isc[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_QZSSEPHEMERIS_H

