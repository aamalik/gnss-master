/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/SbasLongTermErrorCorrection.msg */
#ifndef RTKRCV_MESSAGE_SBASLONGTERMERRORCORRECTION_H
#define RTKRCV_MESSAGE_SBASLONGTERMERRORCORRECTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct SbasLongTermErrorCorrection_ {
  typedef SbasLongTermErrorCorrection_<ContainerAllocator> Type;

  SbasLongTermErrorCorrection_()
  : t0()
  , iode(0)
  , dpos()
  , dvel()
  , daf0(0.0)
  , daf1s(0.0)
  {
  }

  SbasLongTermErrorCorrection_(const ContainerAllocator& _alloc)
  : t0()
  , iode(0)
  , dpos(_alloc)
  , dvel(_alloc)
  , daf0(0.0)
  , daf1s(0.0)
  {
  }

  typedef ros::Time _t0_type;
  ros::Time t0;

  typedef int32_t _iode_type;
  int32_t iode;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dpos_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  dpos;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dvel_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  dvel;

  typedef double _daf0_type;
  double daf0;

  typedef double _daf1s_type;
  double daf1s;


  typedef boost::shared_ptr< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SbasLongTermErrorCorrection
typedef  ::rtkrcv::SbasLongTermErrorCorrection_<std::allocator<void> > SbasLongTermErrorCorrection;

typedef boost::shared_ptr< ::rtkrcv::SbasLongTermErrorCorrection> SbasLongTermErrorCorrectionPtr;
typedef boost::shared_ptr< ::rtkrcv::SbasLongTermErrorCorrection const> SbasLongTermErrorCorrectionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dadc3603f7423f2f0cd8571125e7ad7";
  }

  static const char* value(const  ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4dadc3603f7423f2ULL;
  static const uint64_t static_value2 = 0xf0cd8571125e7ad7ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/SbasLongTermErrorCorrection";
  }

  static const char* value(const  ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# SBAS long term satellite error correction type\n\
\n\
time t0                        # correction time\n\
int32 iode                     # IODE (issue of date ephemeris)\n\
geometry_msgs/Vector3 dpos     # delta position (m) (ecef)\n\
geometry_msgs/Vector3 dvel     # delta velocity (m/s) (ecef)\n\
float64 daf0                   # delta clock-offset(s,s/s)\n\
float64 daf1s                  # delta drift (s,s/s)\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.t0);
    stream.next(m.iode);
    stream.next(m.dpos);
    stream.next(m.dvel);
    stream.next(m.daf0);
    stream.next(m.daf1s);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SbasLongTermErrorCorrection_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::SbasLongTermErrorCorrection_<ContainerAllocator> & v) 
  {
    s << indent << "t0: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t0);
    s << indent << "iode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iode);
    s << indent << "dpos: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dpos);
    s << indent << "dvel: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dvel);
    s << indent << "daf0: ";
    Printer<double>::stream(s, indent + "  ", v.daf0);
    s << indent << "daf1s: ";
    Printer<double>::stream(s, indent + "  ", v.daf1s);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_SBASLONGTERMERRORCORRECTION_H

