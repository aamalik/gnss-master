/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/sbsigp_t.msg */
#ifndef RTKRCV_MESSAGE_SBSIGP_T_H
#define RTKRCV_MESSAGE_SBSIGP_T_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct sbsigp_t_ {
  typedef sbsigp_t_<ContainerAllocator> Type;

  sbsigp_t_()
  : t0()
  , lat(0)
  , lon(0)
  , give(0)
  , delay(0.0)
  {
  }

  sbsigp_t_(const ContainerAllocator& _alloc)
  : t0()
  , lat(0)
  , lon(0)
  , give(0)
  , delay(0.0)
  {
  }

  typedef ros::Time _t0_type;
  ros::Time t0;

  typedef int16_t _lat_type;
  int16_t lat;

  typedef int16_t _lon_type;
  int16_t lon;

  typedef int16_t _give_type;
  int16_t give;

  typedef float _delay_type;
  float delay;


  typedef boost::shared_ptr< ::rtkrcv::sbsigp_t_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::sbsigp_t_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sbsigp_t
typedef  ::rtkrcv::sbsigp_t_<std::allocator<void> > sbsigp_t;

typedef boost::shared_ptr< ::rtkrcv::sbsigp_t> sbsigp_tPtr;
typedef boost::shared_ptr< ::rtkrcv::sbsigp_t const> sbsigp_tConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::sbsigp_t_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::sbsigp_t_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sbsigp_t_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::sbsigp_t_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::sbsigp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f4e8be9b5bc2e0f8af3ad2e777a018eb";
  }

  static const char* value(const  ::rtkrcv::sbsigp_t_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf4e8be9b5bc2e0f8ULL;
  static const uint64_t static_value2 = 0xaf3ad2e777a018ebULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::sbsigp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/sbsigp_t";
  }

  static const char* value(const  ::rtkrcv::sbsigp_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::sbsigp_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# SBAS ionospheric correction type\n\
\n\
time t0               # correction time\n\
int16 lat             # latitude (deg)\n\
int16 lon             # longitude (deg)\n\
int16 give            # GIVI+1\n\
float32 delay         # vertical delay estimate (m)\n\
";
  }

  static const char* value(const  ::rtkrcv::sbsigp_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::sbsigp_t_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::sbsigp_t_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.t0);
    stream.next(m.lat);
    stream.next(m.lon);
    stream.next(m.give);
    stream.next(m.delay);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sbsigp_t_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::sbsigp_t_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::sbsigp_t_<ContainerAllocator> & v) 
  {
    s << indent << "t0: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t0);
    s << indent << "lat: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lon);
    s << indent << "give: ";
    Printer<int16_t>::stream(s, indent + "  ", v.give);
    s << indent << "delay: ";
    Printer<float>::stream(s, indent + "  ", v.delay);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_SBSIGP_T_H

