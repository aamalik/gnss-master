/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/PreciseEphemeris.msg */
#ifndef RTKRCV_MESSAGE_PRECISEEPHEMERIS_H
#define RTKRCV_MESSAGE_PRECISEEPHEMERIS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct PreciseEphemeris_ {
  typedef PreciseEphemeris_<ContainerAllocator> Type;

  PreciseEphemeris_()
  : time()
  , index(0)
  , pos()
  , std()
  {
  }

  PreciseEphemeris_(const ContainerAllocator& _alloc)
  : time()
  , index(0)
  , pos(_alloc)
  , std(_alloc)
  {
  }

  typedef ros::Time _time_type;
  ros::Time time;

  typedef int32_t _index_type;
  int32_t index;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  pos;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _std_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  std;


  typedef boost::shared_ptr< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::PreciseEphemeris_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PreciseEphemeris
typedef  ::rtkrcv::PreciseEphemeris_<std::allocator<void> > PreciseEphemeris;

typedef boost::shared_ptr< ::rtkrcv::PreciseEphemeris> PreciseEphemerisPtr;
typedef boost::shared_ptr< ::rtkrcv::PreciseEphemeris const> PreciseEphemerisConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::PreciseEphemeris_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::PreciseEphemeris_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> > {
  static const char* value() 
  {
    return "555439c80bc2a8208f90b7b2a96d184b";
  }

  static const char* value(const  ::rtkrcv::PreciseEphemeris_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x555439c80bc2a820ULL;
  static const uint64_t static_value2 = 0x8f90b7b2a96d184bULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/PreciseEphemeris";
  }

  static const char* value(const  ::rtkrcv::PreciseEphemeris_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# precise ephemeris type\n\
\n\
time time                 # time (GPST)\n\
int32 index               # ephemeris index for multiple files\n\
float64[] pos             # satellite position/clock (ecef) (m|s)\n\
float32[] std             # satellite position/clock std (m|s)\n\
";
  }

  static const char* value(const  ::rtkrcv::PreciseEphemeris_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.time);
    stream.next(m.index);
    stream.next(m.pos);
    stream.next(m.std);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PreciseEphemeris_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::PreciseEphemeris_<ContainerAllocator> & v) 
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "std[]" << std::endl;
    for (size_t i = 0; i < v.std.size(); ++i)
    {
      s << indent << "  std[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.std[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_PRECISEEPHEMERIS_H

