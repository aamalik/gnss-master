/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/TotalElectronContent.msg */
#ifndef RTKRCV_MESSAGE_TOTALELECTRONCONTENT_H
#define RTKRCV_MESSAGE_TOTALELECTRONCONTENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct TotalElectronContent_ {
  typedef TotalElectronContent_<ContainerAllocator> Type;

  TotalElectronContent_()
  : time()
  , ndata()
  , rb(0.0)
  , lats()
  , lons()
  , hgts()
  , data()
  , rms()
  {
  }

  TotalElectronContent_(const ContainerAllocator& _alloc)
  : time()
  , ndata(_alloc)
  , rb(0.0)
  , lats(_alloc)
  , lons(_alloc)
  , hgts(_alloc)
  , data(_alloc)
  , rms(_alloc)
  {
  }

  typedef ros::Time _time_type;
  ros::Time time;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ndata_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  ndata;

  typedef double _rb_type;
  double rb;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lats_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  lats;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lons_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  lons;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _hgts_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  hgts;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _data_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  data;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rms_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  rms;


  typedef boost::shared_ptr< ::rtkrcv::TotalElectronContent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::TotalElectronContent_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TotalElectronContent
typedef  ::rtkrcv::TotalElectronContent_<std::allocator<void> > TotalElectronContent;

typedef boost::shared_ptr< ::rtkrcv::TotalElectronContent> TotalElectronContentPtr;
typedef boost::shared_ptr< ::rtkrcv::TotalElectronContent const> TotalElectronContentConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::TotalElectronContent_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::TotalElectronContent_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::TotalElectronContent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::TotalElectronContent_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::TotalElectronContent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "83696db70a6f8d6f1ed8b31abf7c41dd";
  }

  static const char* value(const  ::rtkrcv::TotalElectronContent_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x83696db70a6f8d6fULL;
  static const uint64_t static_value2 = 0x1ed8b31abf7c41ddULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::TotalElectronContent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/TotalElectronContent";
  }

  static const char* value(const  ::rtkrcv::TotalElectronContent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::TotalElectronContent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# TEC type\n\
\n\
time time                # epoch time (GPST)\n\
\n\
int32[] ndata            # TEC grid data size {nlat,nlon,nhgt}\n\
\n\
float64 rb               # earth radius (km)\n\
float64[] lats           # latitude start/interval (deg)\n\
float64[] lons           # longitude start/interval (deg)\n\
float64[] hgts           # heights start/interval (km)\n\
float64[] data           # TEC grid data (tecu)\n\
float32[] rms            # RMS values (tecu)\n\
";
  }

  static const char* value(const  ::rtkrcv::TotalElectronContent_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::TotalElectronContent_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.time);
    stream.next(m.ndata);
    stream.next(m.rb);
    stream.next(m.lats);
    stream.next(m.lons);
    stream.next(m.hgts);
    stream.next(m.data);
    stream.next(m.rms);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TotalElectronContent_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::TotalElectronContent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::TotalElectronContent_<ContainerAllocator> & v) 
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "ndata[]" << std::endl;
    for (size_t i = 0; i < v.ndata.size(); ++i)
    {
      s << indent << "  ndata[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ndata[i]);
    }
    s << indent << "rb: ";
    Printer<double>::stream(s, indent + "  ", v.rb);
    s << indent << "lats[]" << std::endl;
    for (size_t i = 0; i < v.lats.size(); ++i)
    {
      s << indent << "  lats[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lats[i]);
    }
    s << indent << "lons[]" << std::endl;
    for (size_t i = 0; i < v.lons.size(); ++i)
    {
      s << indent << "  lons[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lons[i]);
    }
    s << indent << "hgts[]" << std::endl;
    for (size_t i = 0; i < v.hgts.size(); ++i)
    {
      s << indent << "  hgts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hgts[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "rms[]" << std::endl;
    for (size_t i = 0; i < v.rms.size(); ++i)
    {
      s << indent << "  rms[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rms[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_TOTALELECTRONCONTENT_H

