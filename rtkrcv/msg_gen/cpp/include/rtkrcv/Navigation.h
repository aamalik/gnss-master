/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/Navigation.msg */
#ifndef RTKRCV_MESSAGE_NAVIGATION_H
#define RTKRCV_MESSAGE_NAVIGATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rtkrcv/Ephemeris.h"
#include "rtkrcv/GlonassEphemeris.h"
#include "rtkrcv/SbasEphemeris.h"
#include "rtkrcv/PreciseEphemeris.h"
#include "rtkrcv/PreciseClock.h"
#include "rtkrcv/Almanac.h"
#include "rtkrcv/TotalElectronContent.h"
#include "rtkrcv/stec_t.h"
#include "rtkrcv/erp_t.h"
#include "rtkrcv/lam.h"
#include "rtkrcv/cbias.h"
#include "rtkrcv/AntennaParameter.h"
#include "rtkrcv/sbssat_t.h"
#include "rtkrcv/sbsion_t.h"
#include "rtkrcv/DifferentialGnss.h"
#include "rtkrcv/ssr_t.h"
#include "rtkrcv/QzssEphemeris.h"
#include "rtkrcv/QzssIonosphereCorrection.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct Navigation_ {
  typedef Navigation_<ContainerAllocator> Type;

  Navigation_()
  : eph()
  , geph()
  , seph()
  , peph()
  , pclk()
  , alm()
  , tec()
  , stec()
  , erp()
  , utc_gps()
  , utc_glo()
  , utc_gal()
  , utc_qzs()
  , utc_cmp()
  , utc_sbs()
  , ion_gps()
  , ion_gal()
  , ion_qzs()
  , ion_cmp()
  , leaps(0)
  , lamcwl()
  , codebias()
  , pcvs()
  , sbssat()
  , sbsion()
  , dgps()
  , ssr()
  , lexeph()
  , lexion()
  , wlbias()
  , glo_cpbias()
  , glo_fcn()
  {
    utc_gps.assign(0.0);
    utc_glo.assign(0.0);
    utc_gal.assign(0.0);
    utc_qzs.assign(0.0);
    utc_cmp.assign(0.0);
    utc_sbs.assign(0.0);
    ion_gps.assign(0.0);
    ion_gal.assign(0.0);
    ion_qzs.assign(0.0);
    ion_cmp.assign(0.0);
  }

  Navigation_(const ContainerAllocator& _alloc)
  : eph(_alloc)
  , geph(_alloc)
  , seph(_alloc)
  , peph(_alloc)
  , pclk(_alloc)
  , alm(_alloc)
  , tec(_alloc)
  , stec(_alloc)
  , erp(_alloc)
  , utc_gps()
  , utc_glo()
  , utc_gal()
  , utc_qzs()
  , utc_cmp()
  , utc_sbs()
  , ion_gps()
  , ion_gal()
  , ion_qzs()
  , ion_cmp()
  , leaps(0)
  , lamcwl(_alloc)
  , codebias(_alloc)
  , pcvs(_alloc)
  , sbssat(_alloc)
  , sbsion(_alloc)
  , dgps(_alloc)
  , ssr(_alloc)
  , lexeph(_alloc)
  , lexion(_alloc)
  , wlbias(_alloc)
  , glo_cpbias(_alloc)
  , glo_fcn(_alloc)
  {
    utc_gps.assign(0.0);
    utc_glo.assign(0.0);
    utc_gal.assign(0.0);
    utc_qzs.assign(0.0);
    utc_cmp.assign(0.0);
    utc_sbs.assign(0.0);
    ion_gps.assign(0.0);
    ion_gal.assign(0.0);
    ion_qzs.assign(0.0);
    ion_cmp.assign(0.0);
  }

  typedef std::vector< ::rtkrcv::Ephemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::Ephemeris_<ContainerAllocator> >::other >  _eph_type;
  std::vector< ::rtkrcv::Ephemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::Ephemeris_<ContainerAllocator> >::other >  eph;

  typedef std::vector< ::rtkrcv::GlonassEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::GlonassEphemeris_<ContainerAllocator> >::other >  _geph_type;
  std::vector< ::rtkrcv::GlonassEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::GlonassEphemeris_<ContainerAllocator> >::other >  geph;

  typedef std::vector< ::rtkrcv::SbasEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::SbasEphemeris_<ContainerAllocator> >::other >  _seph_type;
  std::vector< ::rtkrcv::SbasEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::SbasEphemeris_<ContainerAllocator> >::other >  seph;

  typedef std::vector< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> >::other >  _peph_type;
  std::vector< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> >::other >  peph;

  typedef std::vector< ::rtkrcv::PreciseClock_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::PreciseClock_<ContainerAllocator> >::other >  _pclk_type;
  std::vector< ::rtkrcv::PreciseClock_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::PreciseClock_<ContainerAllocator> >::other >  pclk;

  typedef std::vector< ::rtkrcv::Almanac_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::Almanac_<ContainerAllocator> >::other >  _alm_type;
  std::vector< ::rtkrcv::Almanac_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::Almanac_<ContainerAllocator> >::other >  alm;

  typedef std::vector< ::rtkrcv::TotalElectronContent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::TotalElectronContent_<ContainerAllocator> >::other >  _tec_type;
  std::vector< ::rtkrcv::TotalElectronContent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::TotalElectronContent_<ContainerAllocator> >::other >  tec;

  typedef std::vector< ::rtkrcv::stec_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::stec_t_<ContainerAllocator> >::other >  _stec_type;
  std::vector< ::rtkrcv::stec_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::stec_t_<ContainerAllocator> >::other >  stec;

  typedef  ::rtkrcv::erp_t_<ContainerAllocator>  _erp_type;
   ::rtkrcv::erp_t_<ContainerAllocator>  erp;

  typedef boost::array<double, 4>  _utc_gps_type;
  boost::array<double, 4>  utc_gps;

  typedef boost::array<double, 4>  _utc_glo_type;
  boost::array<double, 4>  utc_glo;

  typedef boost::array<double, 4>  _utc_gal_type;
  boost::array<double, 4>  utc_gal;

  typedef boost::array<double, 4>  _utc_qzs_type;
  boost::array<double, 4>  utc_qzs;

  typedef boost::array<double, 4>  _utc_cmp_type;
  boost::array<double, 4>  utc_cmp;

  typedef boost::array<double, 4>  _utc_sbs_type;
  boost::array<double, 4>  utc_sbs;

  typedef boost::array<double, 8>  _ion_gps_type;
  boost::array<double, 8>  ion_gps;

  typedef boost::array<double, 4>  _ion_gal_type;
  boost::array<double, 4>  ion_gal;

  typedef boost::array<double, 8>  _ion_qzs_type;
  boost::array<double, 8>  ion_qzs;

  typedef boost::array<double, 8>  _ion_cmp_type;
  boost::array<double, 8>  ion_cmp;

  typedef int32_t _leaps_type;
  int32_t leaps;

  typedef std::vector< ::rtkrcv::lam_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::lam_<ContainerAllocator> >::other >  _lamcwl_type;
  std::vector< ::rtkrcv::lam_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::lam_<ContainerAllocator> >::other >  lamcwl;

  typedef std::vector< ::rtkrcv::cbias_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::cbias_<ContainerAllocator> >::other >  _codebias_type;
  std::vector< ::rtkrcv::cbias_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::cbias_<ContainerAllocator> >::other >  codebias;

  typedef std::vector< ::rtkrcv::AntennaParameter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::AntennaParameter_<ContainerAllocator> >::other >  _pcvs_type;
  std::vector< ::rtkrcv::AntennaParameter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::AntennaParameter_<ContainerAllocator> >::other >  pcvs;

  typedef  ::rtkrcv::sbssat_t_<ContainerAllocator>  _sbssat_type;
   ::rtkrcv::sbssat_t_<ContainerAllocator>  sbssat;

  typedef std::vector< ::rtkrcv::sbsion_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::sbsion_t_<ContainerAllocator> >::other >  _sbsion_type;
  std::vector< ::rtkrcv::sbsion_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::sbsion_t_<ContainerAllocator> >::other >  sbsion;

  typedef std::vector< ::rtkrcv::DifferentialGnss_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::DifferentialGnss_<ContainerAllocator> >::other >  _dgps_type;
  std::vector< ::rtkrcv::DifferentialGnss_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::DifferentialGnss_<ContainerAllocator> >::other >  dgps;

  typedef std::vector< ::rtkrcv::ssr_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::ssr_t_<ContainerAllocator> >::other >  _ssr_type;
  std::vector< ::rtkrcv::ssr_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::ssr_t_<ContainerAllocator> >::other >  ssr;

  typedef std::vector< ::rtkrcv::QzssEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::QzssEphemeris_<ContainerAllocator> >::other >  _lexeph_type;
  std::vector< ::rtkrcv::QzssEphemeris_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::QzssEphemeris_<ContainerAllocator> >::other >  lexeph;

  typedef  ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator>  _lexion_type;
   ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator>  lexion;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _wlbias_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  wlbias;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _glo_cpbias_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  glo_cpbias;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _glo_fcn_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  glo_fcn;


  typedef boost::shared_ptr< ::rtkrcv::Navigation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::Navigation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Navigation
typedef  ::rtkrcv::Navigation_<std::allocator<void> > Navigation;

typedef boost::shared_ptr< ::rtkrcv::Navigation> NavigationPtr;
typedef boost::shared_ptr< ::rtkrcv::Navigation const> NavigationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::Navigation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::Navigation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::Navigation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::Navigation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::Navigation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "650c43efcbdcf098fa315e28d42cc45d";
  }

  static const char* value(const  ::rtkrcv::Navigation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x650c43efcbdcf098ULL;
  static const uint64_t static_value2 = 0xfa315e28d42cc45dULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::Navigation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/Navigation";
  }

  static const char* value(const  ::rtkrcv::Navigation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::Navigation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# navigation data type\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
Ephemeris[] eph                     # GPS/QZS/GAL ephemeris\n\
GlonassEphemeris[] geph             # GLONASS ephemeris\n\
SbasEphemeris[] seph                # SBAS ephemeris\n\
PreciseEphemeris[] peph             # precise ephemeris\n\
PreciseClock[] pclk                 # precise clock\n\
Almanac[] alm                       # almanac data\n\
TotalElectronContent[] tec          # TEC grid data\n\
stec_t[] stec                       # stec grid data \n\
erp_t erp                           # earth rotation parameters\n\
\n\
float64[4] utc_gps                  # GPS delta-UTC parameters {A0,A1,T,W}\n\
float64[4] utc_glo                  # GLONASS UTC GPS time parameters\n\
float64[4] utc_gal                  # Galileo UTC GPS time parameters\n\
float64[4] utc_qzs                  # QZS UTC GPS time parameters\n\
float64[4] utc_cmp                  # BeiDou UTC parameters\n\
float64[4] utc_sbs                  # SBAS UTC parameters \n\
float64[8] ion_gps                  # GPS iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3}\n\
float64[4] ion_gal                  # Galileo iono model parameters {ai0,ai1,ai2,0}\n\
float64[8] ion_qzs                  # QZSS iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3}\n\
float64[8] ion_cmp                  # BeiDou iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3} \n\
int32 leaps                         # leap seconds (s)\n\
\n\
lam[] lamcwl                        # carrier wave lengths (m)\n\
cbias[] codebias                    # code bias (0:p1-p2,1:p1-c1,2:p2-c2) (m)\n\
AntennaParameter[] pcvs             # satellite antenna pcv\n\
sbssat_t sbssat                     # SBAS satellite corrections\n\
sbsion_t[] sbsion                   # SBAS ionosphere corrections\n\
DifferentialGnss[] dgps             # DGPS corrections\n\
ssr_t[] ssr                         # SSR corrections\n\
QzssEphemeris[] lexeph              # LEX ephemeris\n\
QzssIonosphereCorrection lexion     # LEX ionosphere correction\n\
\n\
float64[] wlbias                    # wide-lane bias (cycle) \n\
float64[] glo_cpbias                # glonass code-phase bias {1C,1P,2C,2P} (m) \n\
uint8[] glo_fcn\n\
================================================================================\n\
MSG: rtkrcv/Ephemeris\n\
# GPS/QZS/GAL broadcast ephemeris type\n\
\n\
int32 sat             # satellite number\n\
================================================================================\n\
MSG: rtkrcv/GlonassEphemeris\n\
# GLONASS broadcast ephemeris type\n\
\n\
int32 sat                      # satellite number\n\
int32 iode                     # IODE (0-6 bit of tb field)\n\
int32 frq                      # satellite frequency number\n\
int32 svh                      # satellite health\n\
int32 sva                      # satellite accuracy\n\
int32 age                      # satellite age of operation\n\
\n\
time toe                       # epoch of epherides (gpst)\n\
time tof                       # message frame time (gpst)\n\
\n\
geometry_msgs/Vector3 pos      # satellite position (ecef) (m)\n\
geometry_msgs/Vector3 vel      # satellite velocity (ecef) (m/s)\n\
geometry_msgs/Vector3 acc      # satellite acceleration (ecef) (m/s^2)\n\
float64 taun                   # SV clock bias (s)\n\
float64 gamn                   # relative freq bias\n\
float64 dtaun                  # delay between L1 and L2 (s)\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: rtkrcv/SbasEphemeris\n\
# SBAS ephemeris type\n\
\n\
int32 sat                       # satellite number\n\
time t0                         # reference epoch time (GPST)\n\
time tof                        # time of message frame (GPST)\n\
int32 sva                       # SV accuracy (URA index)\n\
int32 svh                       # SV health (0:ok)\n\
\n\
geometry_msgs/Vector3 pos       # satellite position (m) (ecef)\n\
geometry_msgs/Vector3 vel       # satellite velocity (m/s) (ecef)\n\
geometry_msgs/Vector3 acc       # satellite acceleration (m/s^2) (ecef)\n\
float64 af0                     # satellite clock-offset (s,s/s)\n\
float64 af1                     # satellite drift (s,s/s)\n\
================================================================================\n\
MSG: rtkrcv/PreciseEphemeris\n\
# precise ephemeris type\n\
\n\
time time                 # time (GPST)\n\
int32 index               # ephemeris index for multiple files\n\
float64[] pos             # satellite position/clock (ecef) (m|s)\n\
float32[] std             # satellite position/clock std (m|s)\n\
================================================================================\n\
MSG: rtkrcv/PreciseClock\n\
# precise clock type\n\
\n\
time time               # time (GPST)\n\
int32 index             # clock index for multiple files\n\
float64[] clk           # satellite clock (s)\n\
float32[] std           # satellite clock std (s)\n\
================================================================================\n\
MSG: rtkrcv/Almanac\n\
# The almanac consists of coarse orbit and status information for each satellite in the constellation, an ionospheric model, and information to relate GNSS derived time to Coordinated Universal Time (UTC)\n\
\n\
int32 sat                     # satellite number\n\
int32 svh                     # sv health (0:ok)\n\
int32 svconf                  # as and sv config\n\
int32 week                    # GPS/QZS: gps week, GAL: galileo week\n\
Header toa                    # Toa\n\
\n\
# SV orbit parameters\n\
float64 A\n\
float64 e\n\
float64 i0\n\
float64 OMG0\n\
float64 omg\n\
float64 M0\n\
float64 OMGd\n\
\n\
float64 toas                  # Toa (s) in week\n\
\n\
# SV clock parameters (af0,af1)\n\
float64 f0\n\
float64 f1\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: rtkrcv/TotalElectronContent\n\
# TEC type\n\
\n\
time time                # epoch time (GPST)\n\
\n\
int32[] ndata            # TEC grid data size {nlat,nlon,nhgt}\n\
\n\
float64 rb               # earth radius (km)\n\
float64[] lats           # latitude start/interval (deg)\n\
float64[] lons           # longitude start/interval (deg)\n\
float64[] hgts           # heights start/interval (km)\n\
float64[] data           # TEC grid data (tecu)\n\
float32[] rms            # RMS values (tecu)\n\
================================================================================\n\
MSG: rtkrcv/stec_t\n\
# stec grid type\n\
\n\
float64[] pos              #latitude/longitude (deg)\n\
int32[] index              #search index\n\
int32 n\n\
int32 nmax                 #number of data\n\
stecd_t[] data             #stec data\n\
\n\
================================================================================\n\
MSG: rtkrcv/stecd_t\n\
# stec data type\n\
\n\
Header header           #time (GPST)\n\
uint8 sat               #satellite number\n\
uint8 slip              #slip flag\n\
float32 iono            #L1 ionosphere delay (m)\n\
float32 rate            #L1 ionosphere rate (m/s)\n\
float32 rms             #rms value (m)\n\
================================================================================\n\
MSG: rtkrcv/erp_t\n\
# earth rotation parameter type\n\
\n\
erpd_t[] data         # earth rotation parameter data\n\
================================================================================\n\
MSG: rtkrcv/erpd_t\n\
# earth rotation parameter data type\n\
\n\
float64 mjd                 # mjd (days)\n\
float64 xp\n\
float64 yp                  # pole offset (rad)\n\
float64 xpr\n\
float64 ypr                 # pole offset rate (rad/day)\n\
float64 ut1_utc             # ut1-utc (s)\n\
float64 lod                 # length of day (s/day)\n\
================================================================================\n\
MSG: rtkrcv/lam\n\
#Datatype for lam message type (carrier wave lengths (m) )\n\
\n\
float64 L1\n\
float64 L2\n\
float64 L5\n\
float64 L6\n\
float64 L7\n\
float64 L8\n\
\n\
================================================================================\n\
MSG: rtkrcv/cbias\n\
# code bias (0:p1-p2,1:p1-c1,2:p2-c2) (m)\n\
\n\
float64 p1_p2\n\
float64 p1_c1\n\
float64 p2_c2\n\
================================================================================\n\
MSG: rtkrcv/AntennaParameter\n\
# antenna parameter type\n\
\n\
int32 sat              # satellite number (0:receiver)\n\
int8[] type            # antenna type\n\
int8[] code            # serial number or satellite code\n\
\n\
time ts                # valid time start\n\
time te                # valid time end\n\
\n\
float64[3] off         # phase center offset e/n/u or x/y/z (m)\n\
float64[19] var        # phase center variation (m)\n\
                       # el=90,85,...,0 or nadir=0,1,2,3,... (deg)\n\
================================================================================\n\
MSG: rtkrcv/sbssat_t\n\
# SBAS satellite corrections type\n\
\n\
int32 iodp               # IODP (issue of date mask)\n\
int32 nsat               # number of satellites\n\
int32 tlat               # system latency (s)\n\
sbssatp_t[] sat          # satellite correction\n\
================================================================================\n\
MSG: rtkrcv/sbssatp_t\n\
# SBAS satellite correction type\n\
\n\
int32 sat                                   # satellite number\n\
SbasFastCorrection fcorr                    # fast correction\n\
SbasLongTermErrorCorrection lcorr           # long term correction\n\
================================================================================\n\
MSG: rtkrcv/SbasFastCorrection\n\
# SBAS fast correction type\n\
\n\
time t0             # time of applicability (TOF)\n\
float64 prc         # pseudorange correction (PRC) (m)\n\
float64 rrc         # range-rate correction (RRC) (m/s)\n\
float64 dt          # range-rate correction delta-time (s)\n\
int32 iodf          # IODF (issue of date fast corr)\n\
int16 udre          # UDRE+1\n\
int16 ai            # degradation factor indicator\n\
================================================================================\n\
MSG: rtkrcv/SbasLongTermErrorCorrection\n\
# SBAS long term satellite error correction type\n\
\n\
time t0                        # correction time\n\
int32 iode                     # IODE (issue of date ephemeris)\n\
geometry_msgs/Vector3 dpos     # delta position (m) (ecef)\n\
geometry_msgs/Vector3 dvel     # delta velocity (m/s) (ecef)\n\
float64 daf0                   # delta clock-offset(s,s/s)\n\
float64 daf1s                  # delta drift (s,s/s)\n\
\n\
================================================================================\n\
MSG: rtkrcv/sbsion_t\n\
# SBAS ionospheric corrections type\n\
\n\
int32 iodi                 # IODI (issue of date ionos corr)\n\
int32 nigp                 # number of igps\n\
sbsigp_t[] igp             # ionospheric correction\n\
================================================================================\n\
MSG: rtkrcv/sbsigp_t\n\
# SBAS ionospheric correction type\n\
\n\
time t0               # correction time\n\
int16 lat             # latitude (deg)\n\
int16 lon             # longitude (deg)\n\
int16 give            # GIVI+1\n\
float32 delay         # vertical delay estimate (m)\n\
================================================================================\n\
MSG: rtkrcv/DifferentialGnss\n\
# DGPS/GNSS correction type\n\
\n\
time t0             # correction time\n\
float64 prc         # pseudorange correction (PRC) (m)\n\
float64 rrc         # range rate correction (RRC) (m/s)\n\
int32 iod           # issue of data (IOD)\n\
float64 udre        # UDRE\n\
================================================================================\n\
MSG: rtkrcv/ssr_t\n\
 # SSR correction type\n\
\n\
time t0             # epoch time (GPST)\n\
float64[] udi       # SSR update interval (s)\n\
int32[] iod\n\
int32 iode          # issue of data\n\
int32 ura           # URA indicator\n\
int32 refd          # sat ref datum (0:ITRF,1:regional)\n\
float64[] deph      # delta orbit {radial,along,cross} (m)\n\
float64[] ddeph     # dot delta orbit {radial,along,cross} (m/s)\n\
float64[] dclk      # delta clock {c0,c1,c2} (m,m/s,m/s^2)\n\
float64 hrclk       # high-rate clock corection (m)\n\
float32[] cbias     # code biases (m)\n\
uint8 update        # update flag (0:no update,1:update)\n\
================================================================================\n\
MSG: rtkrcv/QzssEphemeris\n\
# QZSS LEX ephemeris type\n\
\n\
time toe                             # epoch time (GPST)\n\
time tof                             # message frame time (GPST)\n\
\n\
int32 sat                            # satellite\n\
uint8 health                         # signal health (L1,L2,L1C,L5,LEX)\n\
uint8 ura                            # URA index\n\
\n\
geometry_msgs/Vector3  pos           # satellite position (m)\n\
geometry_msgs/Vector3  vel           # satellite velocity (m/s)\n\
geometry_msgs/Vector3  acc           # satellite acceleration (m/s2)\n\
geometry_msgs/Vector3  jerk          # satellite jerk (m/s3)\n\
float64 af0                          # satellite clock bias\n\
float64 af1                          # satellite clock drift (s,s/s)\n\
float64 tgd                          # TGD\n\
float64[] isc                        # ISC\n\
================================================================================\n\
MSG: rtkrcv/QzssIonosphereCorrection\n\
# QZSS LEX ionosphere correction type\n\
\n\
time t0                      # epoch time (GPST)\n\
float64 tspan                # valid time span (s)\n\
float64[2] pos0              # reference position {lat,lon} (rad)\n\
float64[6] coefs             # coefficients lat x lon (3 x 2)\n\
";
  }

  static const char* value(const  ::rtkrcv::Navigation_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::Navigation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.eph);
    stream.next(m.geph);
    stream.next(m.seph);
    stream.next(m.peph);
    stream.next(m.pclk);
    stream.next(m.alm);
    stream.next(m.tec);
    stream.next(m.stec);
    stream.next(m.erp);
    stream.next(m.utc_gps);
    stream.next(m.utc_glo);
    stream.next(m.utc_gal);
    stream.next(m.utc_qzs);
    stream.next(m.utc_cmp);
    stream.next(m.utc_sbs);
    stream.next(m.ion_gps);
    stream.next(m.ion_gal);
    stream.next(m.ion_qzs);
    stream.next(m.ion_cmp);
    stream.next(m.leaps);
    stream.next(m.lamcwl);
    stream.next(m.codebias);
    stream.next(m.pcvs);
    stream.next(m.sbssat);
    stream.next(m.sbsion);
    stream.next(m.dgps);
    stream.next(m.ssr);
    stream.next(m.lexeph);
    stream.next(m.lexion);
    stream.next(m.wlbias);
    stream.next(m.glo_cpbias);
    stream.next(m.glo_fcn);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Navigation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::Navigation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::Navigation_<ContainerAllocator> & v) 
  {
    s << indent << "eph[]" << std::endl;
    for (size_t i = 0; i < v.eph.size(); ++i)
    {
      s << indent << "  eph[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::Ephemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.eph[i]);
    }
    s << indent << "geph[]" << std::endl;
    for (size_t i = 0; i < v.geph.size(); ++i)
    {
      s << indent << "  geph[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::GlonassEphemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.geph[i]);
    }
    s << indent << "seph[]" << std::endl;
    for (size_t i = 0; i < v.seph.size(); ++i)
    {
      s << indent << "  seph[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::SbasEphemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.seph[i]);
    }
    s << indent << "peph[]" << std::endl;
    for (size_t i = 0; i < v.peph.size(); ++i)
    {
      s << indent << "  peph[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::PreciseEphemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.peph[i]);
    }
    s << indent << "pclk[]" << std::endl;
    for (size_t i = 0; i < v.pclk.size(); ++i)
    {
      s << indent << "  pclk[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::PreciseClock_<ContainerAllocator> >::stream(s, indent + "    ", v.pclk[i]);
    }
    s << indent << "alm[]" << std::endl;
    for (size_t i = 0; i < v.alm.size(); ++i)
    {
      s << indent << "  alm[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::Almanac_<ContainerAllocator> >::stream(s, indent + "    ", v.alm[i]);
    }
    s << indent << "tec[]" << std::endl;
    for (size_t i = 0; i < v.tec.size(); ++i)
    {
      s << indent << "  tec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::TotalElectronContent_<ContainerAllocator> >::stream(s, indent + "    ", v.tec[i]);
    }
    s << indent << "stec[]" << std::endl;
    for (size_t i = 0; i < v.stec.size(); ++i)
    {
      s << indent << "  stec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::stec_t_<ContainerAllocator> >::stream(s, indent + "    ", v.stec[i]);
    }
    s << indent << "erp: ";
s << std::endl;
    Printer< ::rtkrcv::erp_t_<ContainerAllocator> >::stream(s, indent + "  ", v.erp);
    s << indent << "utc_gps[]" << std::endl;
    for (size_t i = 0; i < v.utc_gps.size(); ++i)
    {
      s << indent << "  utc_gps[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.utc_gps[i]);
    }
    s << indent << "utc_glo[]" << std::endl;
    for (size_t i = 0; i < v.utc_glo.size(); ++i)
    {
      s << indent << "  utc_glo[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.utc_glo[i]);
    }
    s << indent << "utc_gal[]" << std::endl;
    for (size_t i = 0; i < v.utc_gal.size(); ++i)
    {
      s << indent << "  utc_gal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.utc_gal[i]);
    }
    s << indent << "utc_qzs[]" << std::endl;
    for (size_t i = 0; i < v.utc_qzs.size(); ++i)
    {
      s << indent << "  utc_qzs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.utc_qzs[i]);
    }
    s << indent << "utc_cmp[]" << std::endl;
    for (size_t i = 0; i < v.utc_cmp.size(); ++i)
    {
      s << indent << "  utc_cmp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.utc_cmp[i]);
    }
    s << indent << "utc_sbs[]" << std::endl;
    for (size_t i = 0; i < v.utc_sbs.size(); ++i)
    {
      s << indent << "  utc_sbs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.utc_sbs[i]);
    }
    s << indent << "ion_gps[]" << std::endl;
    for (size_t i = 0; i < v.ion_gps.size(); ++i)
    {
      s << indent << "  ion_gps[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ion_gps[i]);
    }
    s << indent << "ion_gal[]" << std::endl;
    for (size_t i = 0; i < v.ion_gal.size(); ++i)
    {
      s << indent << "  ion_gal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ion_gal[i]);
    }
    s << indent << "ion_qzs[]" << std::endl;
    for (size_t i = 0; i < v.ion_qzs.size(); ++i)
    {
      s << indent << "  ion_qzs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ion_qzs[i]);
    }
    s << indent << "ion_cmp[]" << std::endl;
    for (size_t i = 0; i < v.ion_cmp.size(); ++i)
    {
      s << indent << "  ion_cmp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ion_cmp[i]);
    }
    s << indent << "leaps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.leaps);
    s << indent << "lamcwl[]" << std::endl;
    for (size_t i = 0; i < v.lamcwl.size(); ++i)
    {
      s << indent << "  lamcwl[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::lam_<ContainerAllocator> >::stream(s, indent + "    ", v.lamcwl[i]);
    }
    s << indent << "codebias[]" << std::endl;
    for (size_t i = 0; i < v.codebias.size(); ++i)
    {
      s << indent << "  codebias[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::cbias_<ContainerAllocator> >::stream(s, indent + "    ", v.codebias[i]);
    }
    s << indent << "pcvs[]" << std::endl;
    for (size_t i = 0; i < v.pcvs.size(); ++i)
    {
      s << indent << "  pcvs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::AntennaParameter_<ContainerAllocator> >::stream(s, indent + "    ", v.pcvs[i]);
    }
    s << indent << "sbssat: ";
s << std::endl;
    Printer< ::rtkrcv::sbssat_t_<ContainerAllocator> >::stream(s, indent + "  ", v.sbssat);
    s << indent << "sbsion[]" << std::endl;
    for (size_t i = 0; i < v.sbsion.size(); ++i)
    {
      s << indent << "  sbsion[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::sbsion_t_<ContainerAllocator> >::stream(s, indent + "    ", v.sbsion[i]);
    }
    s << indent << "dgps[]" << std::endl;
    for (size_t i = 0; i < v.dgps.size(); ++i)
    {
      s << indent << "  dgps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::DifferentialGnss_<ContainerAllocator> >::stream(s, indent + "    ", v.dgps[i]);
    }
    s << indent << "ssr[]" << std::endl;
    for (size_t i = 0; i < v.ssr.size(); ++i)
    {
      s << indent << "  ssr[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::ssr_t_<ContainerAllocator> >::stream(s, indent + "    ", v.ssr[i]);
    }
    s << indent << "lexeph[]" << std::endl;
    for (size_t i = 0; i < v.lexeph.size(); ++i)
    {
      s << indent << "  lexeph[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::QzssEphemeris_<ContainerAllocator> >::stream(s, indent + "    ", v.lexeph[i]);
    }
    s << indent << "lexion: ";
s << std::endl;
    Printer< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> >::stream(s, indent + "  ", v.lexion);
    s << indent << "wlbias[]" << std::endl;
    for (size_t i = 0; i < v.wlbias.size(); ++i)
    {
      s << indent << "  wlbias[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.wlbias[i]);
    }
    s << indent << "glo_cpbias[]" << std::endl;
    for (size_t i = 0; i < v.glo_cpbias.size(); ++i)
    {
      s << indent << "  glo_cpbias[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.glo_cpbias[i]);
    }
    s << indent << "glo_fcn[]" << std::endl;
    for (size_t i = 0; i < v.glo_fcn.size(); ++i)
    {
      s << indent << "  glo_fcn[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.glo_fcn[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_NAVIGATION_H

