/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/stec_t.msg */
#ifndef RTKRCV_MESSAGE_STEC_T_H
#define RTKRCV_MESSAGE_STEC_T_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rtkrcv/stecd_t.h"

namespace rtkrcv
{
template <class ContainerAllocator>
struct stec_t_ {
  typedef stec_t_<ContainerAllocator> Type;

  stec_t_()
  : pos()
  , index()
  , n(0)
  , nmax(0)
  , data()
  {
  }

  stec_t_(const ContainerAllocator& _alloc)
  : pos(_alloc)
  , index(_alloc)
  , n(0)
  , nmax(0)
  , data(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  pos;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _index_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  index;

  typedef int32_t _n_type;
  int32_t n;

  typedef int32_t _nmax_type;
  int32_t nmax;

  typedef std::vector< ::rtkrcv::stecd_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::stecd_t_<ContainerAllocator> >::other >  _data_type;
  std::vector< ::rtkrcv::stecd_t_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rtkrcv::stecd_t_<ContainerAllocator> >::other >  data;


  typedef boost::shared_ptr< ::rtkrcv::stec_t_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::stec_t_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct stec_t
typedef  ::rtkrcv::stec_t_<std::allocator<void> > stec_t;

typedef boost::shared_ptr< ::rtkrcv::stec_t> stec_tPtr;
typedef boost::shared_ptr< ::rtkrcv::stec_t const> stec_tConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::stec_t_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::stec_t_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::stec_t_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::stec_t_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::stec_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "44598ff6f1bb8c83292c42f23110466c";
  }

  static const char* value(const  ::rtkrcv::stec_t_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x44598ff6f1bb8c83ULL;
  static const uint64_t static_value2 = 0x292c42f23110466cULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::stec_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/stec_t";
  }

  static const char* value(const  ::rtkrcv::stec_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::stec_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# stec grid type\n\
\n\
float64[] pos              #latitude/longitude (deg)\n\
int32[] index              #search index\n\
int32 n\n\
int32 nmax                 #number of data\n\
stecd_t[] data             #stec data\n\
\n\
================================================================================\n\
MSG: rtkrcv/stecd_t\n\
# stec data type\n\
\n\
Header header           #time (GPST)\n\
uint8 sat               #satellite number\n\
uint8 slip              #slip flag\n\
float32 iono            #L1 ionosphere delay (m)\n\
float32 rate            #L1 ionosphere rate (m/s)\n\
float32 rms             #rms value (m)\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rtkrcv::stec_t_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::stec_t_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pos);
    stream.next(m.index);
    stream.next(m.n);
    stream.next(m.nmax);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stec_t_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::stec_t_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::stec_t_<ContainerAllocator> & v) 
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "index[]" << std::endl;
    for (size_t i = 0; i < v.index.size(); ++i)
    {
      s << indent << "  index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.index[i]);
    }
    s << indent << "n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n);
    s << indent << "nmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nmax);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rtkrcv::stecd_t_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_STEC_T_H

