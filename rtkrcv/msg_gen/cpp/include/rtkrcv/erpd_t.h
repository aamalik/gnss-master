/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/erpd_t.msg */
#ifndef RTKRCV_MESSAGE_ERPD_T_H
#define RTKRCV_MESSAGE_ERPD_T_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct erpd_t_ {
  typedef erpd_t_<ContainerAllocator> Type;

  erpd_t_()
  : mjd(0.0)
  , xp(0.0)
  , yp(0.0)
  , xpr(0.0)
  , ypr(0.0)
  , ut1_utc(0.0)
  , lod(0.0)
  {
  }

  erpd_t_(const ContainerAllocator& _alloc)
  : mjd(0.0)
  , xp(0.0)
  , yp(0.0)
  , xpr(0.0)
  , ypr(0.0)
  , ut1_utc(0.0)
  , lod(0.0)
  {
  }

  typedef double _mjd_type;
  double mjd;

  typedef double _xp_type;
  double xp;

  typedef double _yp_type;
  double yp;

  typedef double _xpr_type;
  double xpr;

  typedef double _ypr_type;
  double ypr;

  typedef double _ut1_utc_type;
  double ut1_utc;

  typedef double _lod_type;
  double lod;


  typedef boost::shared_ptr< ::rtkrcv::erpd_t_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::erpd_t_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct erpd_t
typedef  ::rtkrcv::erpd_t_<std::allocator<void> > erpd_t;

typedef boost::shared_ptr< ::rtkrcv::erpd_t> erpd_tPtr;
typedef boost::shared_ptr< ::rtkrcv::erpd_t const> erpd_tConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::erpd_t_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::erpd_t_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::erpd_t_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::erpd_t_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::erpd_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "875080b448f19fe62905bc31b42ff310";
  }

  static const char* value(const  ::rtkrcv::erpd_t_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x875080b448f19fe6ULL;
  static const uint64_t static_value2 = 0x2905bc31b42ff310ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::erpd_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/erpd_t";
  }

  static const char* value(const  ::rtkrcv::erpd_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::erpd_t_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# earth rotation parameter data type\n\
\n\
float64 mjd                 # mjd (days)\n\
float64 xp\n\
float64 yp                  # pole offset (rad)\n\
float64 xpr\n\
float64 ypr                 # pole offset rate (rad/day)\n\
float64 ut1_utc             # ut1-utc (s)\n\
float64 lod                 # length of day (s/day)\n\
";
  }

  static const char* value(const  ::rtkrcv::erpd_t_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::erpd_t_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::erpd_t_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mjd);
    stream.next(m.xp);
    stream.next(m.yp);
    stream.next(m.xpr);
    stream.next(m.ypr);
    stream.next(m.ut1_utc);
    stream.next(m.lod);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct erpd_t_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::erpd_t_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::erpd_t_<ContainerAllocator> & v) 
  {
    s << indent << "mjd: ";
    Printer<double>::stream(s, indent + "  ", v.mjd);
    s << indent << "xp: ";
    Printer<double>::stream(s, indent + "  ", v.xp);
    s << indent << "yp: ";
    Printer<double>::stream(s, indent + "  ", v.yp);
    s << indent << "xpr: ";
    Printer<double>::stream(s, indent + "  ", v.xpr);
    s << indent << "ypr: ";
    Printer<double>::stream(s, indent + "  ", v.ypr);
    s << indent << "ut1_utc: ";
    Printer<double>::stream(s, indent + "  ", v.ut1_utc);
    s << indent << "lod: ";
    Printer<double>::stream(s, indent + "  ", v.lod);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_ERPD_T_H

