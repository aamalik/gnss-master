/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/SbasFastCorrection.msg */
#ifndef RTKRCV_MESSAGE_SBASFASTCORRECTION_H
#define RTKRCV_MESSAGE_SBASFASTCORRECTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct SbasFastCorrection_ {
  typedef SbasFastCorrection_<ContainerAllocator> Type;

  SbasFastCorrection_()
  : t0()
  , prc(0.0)
  , rrc(0.0)
  , dt(0.0)
  , iodf(0)
  , udre(0)
  , ai(0)
  {
  }

  SbasFastCorrection_(const ContainerAllocator& _alloc)
  : t0()
  , prc(0.0)
  , rrc(0.0)
  , dt(0.0)
  , iodf(0)
  , udre(0)
  , ai(0)
  {
  }

  typedef ros::Time _t0_type;
  ros::Time t0;

  typedef double _prc_type;
  double prc;

  typedef double _rrc_type;
  double rrc;

  typedef double _dt_type;
  double dt;

  typedef int32_t _iodf_type;
  int32_t iodf;

  typedef int16_t _udre_type;
  int16_t udre;

  typedef int16_t _ai_type;
  int16_t ai;


  typedef boost::shared_ptr< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::SbasFastCorrection_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SbasFastCorrection
typedef  ::rtkrcv::SbasFastCorrection_<std::allocator<void> > SbasFastCorrection;

typedef boost::shared_ptr< ::rtkrcv::SbasFastCorrection> SbasFastCorrectionPtr;
typedef boost::shared_ptr< ::rtkrcv::SbasFastCorrection const> SbasFastCorrectionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::SbasFastCorrection_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::SbasFastCorrection_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ab18b6bf8b7e82ee4ad362295691322";
  }

  static const char* value(const  ::rtkrcv::SbasFastCorrection_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6ab18b6bf8b7e82eULL;
  static const uint64_t static_value2 = 0xe4ad362295691322ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/SbasFastCorrection";
  }

  static const char* value(const  ::rtkrcv::SbasFastCorrection_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# SBAS fast correction type\n\
\n\
time t0             # time of applicability (TOF)\n\
float64 prc         # pseudorange correction (PRC) (m)\n\
float64 rrc         # range-rate correction (RRC) (m/s)\n\
float64 dt          # range-rate correction delta-time (s)\n\
int32 iodf          # IODF (issue of date fast corr)\n\
int16 udre          # UDRE+1\n\
int16 ai            # degradation factor indicator\n\
";
  }

  static const char* value(const  ::rtkrcv::SbasFastCorrection_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.t0);
    stream.next(m.prc);
    stream.next(m.rrc);
    stream.next(m.dt);
    stream.next(m.iodf);
    stream.next(m.udre);
    stream.next(m.ai);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SbasFastCorrection_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::SbasFastCorrection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::SbasFastCorrection_<ContainerAllocator> & v) 
  {
    s << indent << "t0: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t0);
    s << indent << "prc: ";
    Printer<double>::stream(s, indent + "  ", v.prc);
    s << indent << "rrc: ";
    Printer<double>::stream(s, indent + "  ", v.rrc);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "iodf: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iodf);
    s << indent << "udre: ";
    Printer<int16_t>::stream(s, indent + "  ", v.udre);
    s << indent << "ai: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ai);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_SBASFASTCORRECTION_H

