/* Auto-generated by genmsg_cpp for file /home/asfandyar/gnss-master/rtkrcv/msg/QzssIonosphereCorrection.msg */
#ifndef RTKRCV_MESSAGE_QZSSIONOSPHERECORRECTION_H
#define RTKRCV_MESSAGE_QZSSIONOSPHERECORRECTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rtkrcv
{
template <class ContainerAllocator>
struct QzssIonosphereCorrection_ {
  typedef QzssIonosphereCorrection_<ContainerAllocator> Type;

  QzssIonosphereCorrection_()
  : t0()
  , tspan(0.0)
  , pos0()
  , coefs()
  {
    pos0.assign(0.0);
    coefs.assign(0.0);
  }

  QzssIonosphereCorrection_(const ContainerAllocator& _alloc)
  : t0()
  , tspan(0.0)
  , pos0()
  , coefs()
  {
    pos0.assign(0.0);
    coefs.assign(0.0);
  }

  typedef ros::Time _t0_type;
  ros::Time t0;

  typedef double _tspan_type;
  double tspan;

  typedef boost::array<double, 2>  _pos0_type;
  boost::array<double, 2>  pos0;

  typedef boost::array<double, 6>  _coefs_type;
  boost::array<double, 6>  coefs;


  typedef boost::shared_ptr< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct QzssIonosphereCorrection
typedef  ::rtkrcv::QzssIonosphereCorrection_<std::allocator<void> > QzssIonosphereCorrection;

typedef boost::shared_ptr< ::rtkrcv::QzssIonosphereCorrection> QzssIonosphereCorrectionPtr;
typedef boost::shared_ptr< ::rtkrcv::QzssIonosphereCorrection const> QzssIonosphereCorrectionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rtkrcv

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ea4c4afab86c4c57082330cf44915cef";
  }

  static const char* value(const  ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xea4c4afab86c4c57ULL;
  static const uint64_t static_value2 = 0x082330cf44915cefULL;
};

template<class ContainerAllocator>
struct DataType< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rtkrcv/QzssIonosphereCorrection";
  }

  static const char* value(const  ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# QZSS LEX ionosphere correction type\n\
\n\
time t0                      # epoch time (GPST)\n\
float64 tspan                # valid time span (s)\n\
float64[2] pos0              # reference position {lat,lon} (rad)\n\
float64[6] coefs             # coefficients lat x lon (3 x 2)\n\
";
  }

  static const char* value(const  ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.t0);
    stream.next(m.tspan);
    stream.next(m.pos0);
    stream.next(m.coefs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct QzssIonosphereCorrection_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rtkrcv::QzssIonosphereCorrection_<ContainerAllocator> & v) 
  {
    s << indent << "t0: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t0);
    s << indent << "tspan: ";
    Printer<double>::stream(s, indent + "  ", v.tspan);
    s << indent << "pos0[]" << std::endl;
    for (size_t i = 0; i < v.pos0.size(); ++i)
    {
      s << indent << "  pos0[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos0[i]);
    }
    s << indent << "coefs[]" << std::endl;
    for (size_t i = 0; i < v.coefs.size(); ++i)
    {
      s << indent << "  coefs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coefs[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RTKRCV_MESSAGE_QZSSIONOSPHERECORRECTION_H

