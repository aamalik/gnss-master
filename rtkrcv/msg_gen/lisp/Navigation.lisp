; Auto-generated. Do not edit!


(cl:in-package rtkrcv-msg)


;//! \htmlinclude Navigation.msg.html

(cl:defclass <Navigation> (roslisp-msg-protocol:ros-message)
  ((eph
    :reader eph
    :initarg :eph
    :type (cl:vector rtkrcv-msg:Ephemeris)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:Ephemeris :initial-element (cl:make-instance 'rtkrcv-msg:Ephemeris)))
   (geph
    :reader geph
    :initarg :geph
    :type (cl:vector rtkrcv-msg:GlonassEphemeris)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:GlonassEphemeris :initial-element (cl:make-instance 'rtkrcv-msg:GlonassEphemeris)))
   (seph
    :reader seph
    :initarg :seph
    :type (cl:vector rtkrcv-msg:SbasEphemeris)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:SbasEphemeris :initial-element (cl:make-instance 'rtkrcv-msg:SbasEphemeris)))
   (peph
    :reader peph
    :initarg :peph
    :type (cl:vector rtkrcv-msg:PreciseEphemeris)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:PreciseEphemeris :initial-element (cl:make-instance 'rtkrcv-msg:PreciseEphemeris)))
   (pclk
    :reader pclk
    :initarg :pclk
    :type (cl:vector rtkrcv-msg:PreciseClock)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:PreciseClock :initial-element (cl:make-instance 'rtkrcv-msg:PreciseClock)))
   (alm
    :reader alm
    :initarg :alm
    :type (cl:vector rtkrcv-msg:Almanac)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:Almanac :initial-element (cl:make-instance 'rtkrcv-msg:Almanac)))
   (tec
    :reader tec
    :initarg :tec
    :type (cl:vector rtkrcv-msg:TotalElectronContent)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:TotalElectronContent :initial-element (cl:make-instance 'rtkrcv-msg:TotalElectronContent)))
   (stec
    :reader stec
    :initarg :stec
    :type (cl:vector rtkrcv-msg:stec_t)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:stec_t :initial-element (cl:make-instance 'rtkrcv-msg:stec_t)))
   (erp
    :reader erp
    :initarg :erp
    :type rtkrcv-msg:erp_t
    :initform (cl:make-instance 'rtkrcv-msg:erp_t))
   (utc_gps
    :reader utc_gps
    :initarg :utc_gps
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (utc_glo
    :reader utc_glo
    :initarg :utc_glo
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (utc_gal
    :reader utc_gal
    :initarg :utc_gal
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (utc_qzs
    :reader utc_qzs
    :initarg :utc_qzs
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (utc_cmp
    :reader utc_cmp
    :initarg :utc_cmp
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (utc_sbs
    :reader utc_sbs
    :initarg :utc_sbs
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (ion_gps
    :reader ion_gps
    :initarg :ion_gps
    :type (cl:vector cl:float)
   :initform (cl:make-array 8 :element-type 'cl:float :initial-element 0.0))
   (ion_gal
    :reader ion_gal
    :initarg :ion_gal
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (ion_qzs
    :reader ion_qzs
    :initarg :ion_qzs
    :type (cl:vector cl:float)
   :initform (cl:make-array 8 :element-type 'cl:float :initial-element 0.0))
   (ion_cmp
    :reader ion_cmp
    :initarg :ion_cmp
    :type (cl:vector cl:float)
   :initform (cl:make-array 8 :element-type 'cl:float :initial-element 0.0))
   (leaps
    :reader leaps
    :initarg :leaps
    :type cl:integer
    :initform 0)
   (lamcwl
    :reader lamcwl
    :initarg :lamcwl
    :type (cl:vector rtkrcv-msg:lam)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:lam :initial-element (cl:make-instance 'rtkrcv-msg:lam)))
   (codebias
    :reader codebias
    :initarg :codebias
    :type (cl:vector rtkrcv-msg:cbias)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:cbias :initial-element (cl:make-instance 'rtkrcv-msg:cbias)))
   (pcvs
    :reader pcvs
    :initarg :pcvs
    :type (cl:vector rtkrcv-msg:AntennaParameter)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:AntennaParameter :initial-element (cl:make-instance 'rtkrcv-msg:AntennaParameter)))
   (sbssat
    :reader sbssat
    :initarg :sbssat
    :type rtkrcv-msg:sbssat_t
    :initform (cl:make-instance 'rtkrcv-msg:sbssat_t))
   (sbsion
    :reader sbsion
    :initarg :sbsion
    :type (cl:vector rtkrcv-msg:sbsion_t)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:sbsion_t :initial-element (cl:make-instance 'rtkrcv-msg:sbsion_t)))
   (dgps
    :reader dgps
    :initarg :dgps
    :type (cl:vector rtkrcv-msg:DifferentialGnss)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:DifferentialGnss :initial-element (cl:make-instance 'rtkrcv-msg:DifferentialGnss)))
   (ssr
    :reader ssr
    :initarg :ssr
    :type (cl:vector rtkrcv-msg:ssr_t)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:ssr_t :initial-element (cl:make-instance 'rtkrcv-msg:ssr_t)))
   (lexeph
    :reader lexeph
    :initarg :lexeph
    :type (cl:vector rtkrcv-msg:QzssEphemeris)
   :initform (cl:make-array 0 :element-type 'rtkrcv-msg:QzssEphemeris :initial-element (cl:make-instance 'rtkrcv-msg:QzssEphemeris)))
   (lexion
    :reader lexion
    :initarg :lexion
    :type rtkrcv-msg:QzssIonosphereCorrection
    :initform (cl:make-instance 'rtkrcv-msg:QzssIonosphereCorrection))
   (wlbias
    :reader wlbias
    :initarg :wlbias
    :type (cl:vector cl:float)
   :initform (cl:make-array 0 :element-type 'cl:float :initial-element 0.0))
   (glo_cpbias
    :reader glo_cpbias
    :initarg :glo_cpbias
    :type (cl:vector cl:float)
   :initform (cl:make-array 0 :element-type 'cl:float :initial-element 0.0))
   (glo_fcn
    :reader glo_fcn
    :initarg :glo_fcn
    :type (cl:vector cl:fixnum)
   :initform (cl:make-array 0 :element-type 'cl:fixnum :initial-element 0)))
)

(cl:defclass Navigation (<Navigation>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <Navigation>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'Navigation)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name rtkrcv-msg:<Navigation> is deprecated: use rtkrcv-msg:Navigation instead.")))

(cl:ensure-generic-function 'eph-val :lambda-list '(m))
(cl:defmethod eph-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:eph-val is deprecated.  Use rtkrcv-msg:eph instead.")
  (eph m))

(cl:ensure-generic-function 'geph-val :lambda-list '(m))
(cl:defmethod geph-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:geph-val is deprecated.  Use rtkrcv-msg:geph instead.")
  (geph m))

(cl:ensure-generic-function 'seph-val :lambda-list '(m))
(cl:defmethod seph-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:seph-val is deprecated.  Use rtkrcv-msg:seph instead.")
  (seph m))

(cl:ensure-generic-function 'peph-val :lambda-list '(m))
(cl:defmethod peph-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:peph-val is deprecated.  Use rtkrcv-msg:peph instead.")
  (peph m))

(cl:ensure-generic-function 'pclk-val :lambda-list '(m))
(cl:defmethod pclk-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:pclk-val is deprecated.  Use rtkrcv-msg:pclk instead.")
  (pclk m))

(cl:ensure-generic-function 'alm-val :lambda-list '(m))
(cl:defmethod alm-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:alm-val is deprecated.  Use rtkrcv-msg:alm instead.")
  (alm m))

(cl:ensure-generic-function 'tec-val :lambda-list '(m))
(cl:defmethod tec-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:tec-val is deprecated.  Use rtkrcv-msg:tec instead.")
  (tec m))

(cl:ensure-generic-function 'stec-val :lambda-list '(m))
(cl:defmethod stec-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:stec-val is deprecated.  Use rtkrcv-msg:stec instead.")
  (stec m))

(cl:ensure-generic-function 'erp-val :lambda-list '(m))
(cl:defmethod erp-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:erp-val is deprecated.  Use rtkrcv-msg:erp instead.")
  (erp m))

(cl:ensure-generic-function 'utc_gps-val :lambda-list '(m))
(cl:defmethod utc_gps-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:utc_gps-val is deprecated.  Use rtkrcv-msg:utc_gps instead.")
  (utc_gps m))

(cl:ensure-generic-function 'utc_glo-val :lambda-list '(m))
(cl:defmethod utc_glo-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:utc_glo-val is deprecated.  Use rtkrcv-msg:utc_glo instead.")
  (utc_glo m))

(cl:ensure-generic-function 'utc_gal-val :lambda-list '(m))
(cl:defmethod utc_gal-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:utc_gal-val is deprecated.  Use rtkrcv-msg:utc_gal instead.")
  (utc_gal m))

(cl:ensure-generic-function 'utc_qzs-val :lambda-list '(m))
(cl:defmethod utc_qzs-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:utc_qzs-val is deprecated.  Use rtkrcv-msg:utc_qzs instead.")
  (utc_qzs m))

(cl:ensure-generic-function 'utc_cmp-val :lambda-list '(m))
(cl:defmethod utc_cmp-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:utc_cmp-val is deprecated.  Use rtkrcv-msg:utc_cmp instead.")
  (utc_cmp m))

(cl:ensure-generic-function 'utc_sbs-val :lambda-list '(m))
(cl:defmethod utc_sbs-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:utc_sbs-val is deprecated.  Use rtkrcv-msg:utc_sbs instead.")
  (utc_sbs m))

(cl:ensure-generic-function 'ion_gps-val :lambda-list '(m))
(cl:defmethod ion_gps-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:ion_gps-val is deprecated.  Use rtkrcv-msg:ion_gps instead.")
  (ion_gps m))

(cl:ensure-generic-function 'ion_gal-val :lambda-list '(m))
(cl:defmethod ion_gal-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:ion_gal-val is deprecated.  Use rtkrcv-msg:ion_gal instead.")
  (ion_gal m))

(cl:ensure-generic-function 'ion_qzs-val :lambda-list '(m))
(cl:defmethod ion_qzs-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:ion_qzs-val is deprecated.  Use rtkrcv-msg:ion_qzs instead.")
  (ion_qzs m))

(cl:ensure-generic-function 'ion_cmp-val :lambda-list '(m))
(cl:defmethod ion_cmp-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:ion_cmp-val is deprecated.  Use rtkrcv-msg:ion_cmp instead.")
  (ion_cmp m))

(cl:ensure-generic-function 'leaps-val :lambda-list '(m))
(cl:defmethod leaps-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:leaps-val is deprecated.  Use rtkrcv-msg:leaps instead.")
  (leaps m))

(cl:ensure-generic-function 'lamcwl-val :lambda-list '(m))
(cl:defmethod lamcwl-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:lamcwl-val is deprecated.  Use rtkrcv-msg:lamcwl instead.")
  (lamcwl m))

(cl:ensure-generic-function 'codebias-val :lambda-list '(m))
(cl:defmethod codebias-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:codebias-val is deprecated.  Use rtkrcv-msg:codebias instead.")
  (codebias m))

(cl:ensure-generic-function 'pcvs-val :lambda-list '(m))
(cl:defmethod pcvs-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:pcvs-val is deprecated.  Use rtkrcv-msg:pcvs instead.")
  (pcvs m))

(cl:ensure-generic-function 'sbssat-val :lambda-list '(m))
(cl:defmethod sbssat-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:sbssat-val is deprecated.  Use rtkrcv-msg:sbssat instead.")
  (sbssat m))

(cl:ensure-generic-function 'sbsion-val :lambda-list '(m))
(cl:defmethod sbsion-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:sbsion-val is deprecated.  Use rtkrcv-msg:sbsion instead.")
  (sbsion m))

(cl:ensure-generic-function 'dgps-val :lambda-list '(m))
(cl:defmethod dgps-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:dgps-val is deprecated.  Use rtkrcv-msg:dgps instead.")
  (dgps m))

(cl:ensure-generic-function 'ssr-val :lambda-list '(m))
(cl:defmethod ssr-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:ssr-val is deprecated.  Use rtkrcv-msg:ssr instead.")
  (ssr m))

(cl:ensure-generic-function 'lexeph-val :lambda-list '(m))
(cl:defmethod lexeph-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:lexeph-val is deprecated.  Use rtkrcv-msg:lexeph instead.")
  (lexeph m))

(cl:ensure-generic-function 'lexion-val :lambda-list '(m))
(cl:defmethod lexion-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:lexion-val is deprecated.  Use rtkrcv-msg:lexion instead.")
  (lexion m))

(cl:ensure-generic-function 'wlbias-val :lambda-list '(m))
(cl:defmethod wlbias-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:wlbias-val is deprecated.  Use rtkrcv-msg:wlbias instead.")
  (wlbias m))

(cl:ensure-generic-function 'glo_cpbias-val :lambda-list '(m))
(cl:defmethod glo_cpbias-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:glo_cpbias-val is deprecated.  Use rtkrcv-msg:glo_cpbias instead.")
  (glo_cpbias m))

(cl:ensure-generic-function 'glo_fcn-val :lambda-list '(m))
(cl:defmethod glo_fcn-val ((m <Navigation>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rtkrcv-msg:glo_fcn-val is deprecated.  Use rtkrcv-msg:glo_fcn instead.")
  (glo_fcn m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <Navigation>) ostream)
  "Serializes a message object of type '<Navigation>"
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'eph))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'eph))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'geph))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'geph))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'seph))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'seph))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'peph))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'peph))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'pclk))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'pclk))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'alm))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'alm))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'tec))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'tec))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'stec))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'stec))
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'erp) ostream)
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'utc_gps))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'utc_glo))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'utc_gal))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'utc_qzs))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'utc_cmp))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'utc_sbs))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'ion_gps))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'ion_gal))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'ion_qzs))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'ion_cmp))
  (cl:let* ((signed (cl:slot-value msg 'leaps)) (unsigned (cl:if (cl:< signed 0) (cl:+ signed 4294967296) signed)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) unsigned) ostream)
    )
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'lamcwl))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'lamcwl))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'codebias))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'codebias))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'pcvs))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'pcvs))
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'sbssat) ostream)
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'sbsion))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'sbsion))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'dgps))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'dgps))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'ssr))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'ssr))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'lexeph))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'lexeph))
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'lexion) ostream)
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'wlbias))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'wlbias))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'glo_cpbias))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-double-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 32) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 40) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 48) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 56) bits) ostream)))
   (cl:slot-value msg 'glo_cpbias))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'glo_fcn))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:write-byte (cl:ldb (cl:byte 8 0) ele) ostream))
   (cl:slot-value msg 'glo_fcn))
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <Navigation>) istream)
  "Deserializes a message object of type '<Navigation>"
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'eph) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'eph)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:Ephemeris))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'geph) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'geph)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:GlonassEphemeris))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'seph) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'seph)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:SbasEphemeris))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'peph) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'peph)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:PreciseEphemeris))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'pclk) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'pclk)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:PreciseClock))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'alm) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'alm)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:Almanac))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'tec) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'tec)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:TotalElectronContent))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'stec) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'stec)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:stec_t))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'erp) istream)
  (cl:setf (cl:slot-value msg 'utc_gps) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'utc_gps)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'utc_glo) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'utc_glo)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'utc_gal) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'utc_gal)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'utc_qzs) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'utc_qzs)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'utc_cmp) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'utc_cmp)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'utc_sbs) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'utc_sbs)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'ion_gps) (cl:make-array 8))
  (cl:let ((vals (cl:slot-value msg 'ion_gps)))
    (cl:dotimes (i 8)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'ion_gal) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'ion_gal)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'ion_qzs) (cl:make-array 8))
  (cl:let ((vals (cl:slot-value msg 'ion_qzs)))
    (cl:dotimes (i 8)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'ion_cmp) (cl:make-array 8))
  (cl:let ((vals (cl:slot-value msg 'ion_cmp)))
    (cl:dotimes (i 8)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits)))))
    (cl:let ((unsigned 0))
      (cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) unsigned) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'leaps) (cl:if (cl:< unsigned 2147483648) unsigned (cl:- unsigned 4294967296))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'lamcwl) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'lamcwl)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:lam))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'codebias) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'codebias)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:cbias))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'pcvs) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'pcvs)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:AntennaParameter))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'sbssat) istream)
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'sbsion) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'sbsion)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:sbsion_t))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'dgps) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'dgps)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:DifferentialGnss))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'ssr) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'ssr)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:ssr_t))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'lexeph) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'lexeph)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'rtkrcv-msg:QzssEphemeris))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'lexion) istream)
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'wlbias) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'wlbias)))
    (cl:dotimes (i __ros_arr_len)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits))))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'glo_cpbias) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'glo_cpbias)))
    (cl:dotimes (i __ros_arr_len)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 32) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 40) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 48) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 56) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-double-float-bits bits))))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'glo_fcn) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'glo_fcn)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:ldb (cl:byte 8 0) (cl:aref vals i)) (cl:read-byte istream)))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<Navigation>)))
  "Returns string type for a message object of type '<Navigation>"
  "rtkrcv/Navigation")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'Navigation)))
  "Returns string type for a message object of type 'Navigation"
  "rtkrcv/Navigation")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<Navigation>)))
  "Returns md5sum for a message object of type '<Navigation>"
  "650c43efcbdcf098fa315e28d42cc45d")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'Navigation)))
  "Returns md5sum for a message object of type 'Navigation"
  "650c43efcbdcf098fa315e28d42cc45d")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<Navigation>)))
  "Returns full string definition for message of type '<Navigation>"
  (cl:format cl:nil "# navigation data type~%~%~%~%~%~%~%~%~%~%Ephemeris[] eph                     # GPS/QZS/GAL ephemeris~%GlonassEphemeris[] geph             # GLONASS ephemeris~%SbasEphemeris[] seph                # SBAS ephemeris~%PreciseEphemeris[] peph             # precise ephemeris~%PreciseClock[] pclk                 # precise clock~%Almanac[] alm                       # almanac data~%TotalElectronContent[] tec          # TEC grid data~%stec_t[] stec                       # stec grid data ~%erp_t erp                           # earth rotation parameters~%~%float64[4] utc_gps                  # GPS delta-UTC parameters {A0,A1,T,W}~%float64[4] utc_glo                  # GLONASS UTC GPS time parameters~%float64[4] utc_gal                  # Galileo UTC GPS time parameters~%float64[4] utc_qzs                  # QZS UTC GPS time parameters~%float64[4] utc_cmp                  # BeiDou UTC parameters~%float64[4] utc_sbs                  # SBAS UTC parameters ~%float64[8] ion_gps                  # GPS iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3}~%float64[4] ion_gal                  # Galileo iono model parameters {ai0,ai1,ai2,0}~%float64[8] ion_qzs                  # QZSS iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3}~%float64[8] ion_cmp                  # BeiDou iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3} ~%int32 leaps                         # leap seconds (s)~%~%lam[] lamcwl                        # carrier wave lengths (m)~%cbias[] codebias                    # code bias (0:p1-p2,1:p1-c1,2:p2-c2) (m)~%AntennaParameter[] pcvs             # satellite antenna pcv~%sbssat_t sbssat                     # SBAS satellite corrections~%sbsion_t[] sbsion                   # SBAS ionosphere corrections~%DifferentialGnss[] dgps             # DGPS corrections~%ssr_t[] ssr                         # SSR corrections~%QzssEphemeris[] lexeph              # LEX ephemeris~%QzssIonosphereCorrection lexion     # LEX ionosphere correction~%~%float64[] wlbias                    # wide-lane bias (cycle) ~%float64[] glo_cpbias                # glonass code-phase bias {1C,1P,2C,2P} (m) ~%uint8[] glo_fcn~%================================================================================~%MSG: rtkrcv/Ephemeris~%# GPS/QZS/GAL broadcast ephemeris type~%~%int32 sat             # satellite number~%================================================================================~%MSG: rtkrcv/GlonassEphemeris~%# GLONASS broadcast ephemeris type~%~%int32 sat                      # satellite number~%int32 iode                     # IODE (0-6 bit of tb field)~%int32 frq                      # satellite frequency number~%int32 svh                      # satellite health~%int32 sva                      # satellite accuracy~%int32 age                      # satellite age of operation~%~%time toe                       # epoch of epherides (gpst)~%time tof                       # message frame time (gpst)~%~%geometry_msgs/Vector3 pos      # satellite position (ecef) (m)~%geometry_msgs/Vector3 vel      # satellite velocity (ecef) (m/s)~%geometry_msgs/Vector3 acc      # satellite acceleration (ecef) (m/s^2)~%float64 taun                   # SV clock bias (s)~%float64 gamn                   # relative freq bias~%float64 dtaun                  # delay between L1 and L2 (s)~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: rtkrcv/SbasEphemeris~%# SBAS ephemeris type~%~%int32 sat                       # satellite number~%time t0                         # reference epoch time (GPST)~%time tof                        # time of message frame (GPST)~%int32 sva                       # SV accuracy (URA index)~%int32 svh                       # SV health (0:ok)~%~%geometry_msgs/Vector3 pos       # satellite position (m) (ecef)~%geometry_msgs/Vector3 vel       # satellite velocity (m/s) (ecef)~%geometry_msgs/Vector3 acc       # satellite acceleration (m/s^2) (ecef)~%float64 af0                     # satellite clock-offset (s,s/s)~%float64 af1                     # satellite drift (s,s/s)~%================================================================================~%MSG: rtkrcv/PreciseEphemeris~%# precise ephemeris type~%~%time time                 # time (GPST)~%int32 index               # ephemeris index for multiple files~%float64[] pos             # satellite position/clock (ecef) (m|s)~%float32[] std             # satellite position/clock std (m|s)~%================================================================================~%MSG: rtkrcv/PreciseClock~%# precise clock type~%~%time time               # time (GPST)~%int32 index             # clock index for multiple files~%float64[] clk           # satellite clock (s)~%float32[] std           # satellite clock std (s)~%================================================================================~%MSG: rtkrcv/Almanac~%# The almanac consists of coarse orbit and status information for each satellite in the constellation, an ionospheric model, and information to relate GNSS derived time to Coordinated Universal Time (UTC)~%~%int32 sat                     # satellite number~%int32 svh                     # sv health (0:ok)~%int32 svconf                  # as and sv config~%int32 week                    # GPS/QZS: gps week, GAL: galileo week~%Header toa                    # Toa~%~%# SV orbit parameters~%float64 A~%float64 e~%float64 i0~%float64 OMG0~%float64 omg~%float64 M0~%float64 OMGd~%~%float64 toas                  # Toa (s) in week~%~%# SV clock parameters (af0,af1)~%float64 f0~%float64 f1~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.secs: seconds (stamp_secs) since epoch~%# * stamp.nsecs: nanoseconds since stamp_secs~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: rtkrcv/TotalElectronContent~%# TEC type~%~%time time                # epoch time (GPST)~%~%int32[] ndata            # TEC grid data size {nlat,nlon,nhgt}~%~%float64 rb               # earth radius (km)~%float64[] lats           # latitude start/interval (deg)~%float64[] lons           # longitude start/interval (deg)~%float64[] hgts           # heights start/interval (km)~%float64[] data           # TEC grid data (tecu)~%float32[] rms            # RMS values (tecu)~%================================================================================~%MSG: rtkrcv/stec_t~%# stec grid type~%~%float64[] pos              #latitude/longitude (deg)~%int32[] index              #search index~%int32 n~%int32 nmax                 #number of data~%stecd_t[] data             #stec data~%~%================================================================================~%MSG: rtkrcv/stecd_t~%# stec data type~%~%Header header           #time (GPST)~%uint8 sat               #satellite number~%uint8 slip              #slip flag~%float32 iono            #L1 ionosphere delay (m)~%float32 rate            #L1 ionosphere rate (m/s)~%float32 rms             #rms value (m)~%================================================================================~%MSG: rtkrcv/erp_t~%# earth rotation parameter type~%~%erpd_t[] data         # earth rotation parameter data~%================================================================================~%MSG: rtkrcv/erpd_t~%# earth rotation parameter data type~%~%float64 mjd                 # mjd (days)~%float64 xp~%float64 yp                  # pole offset (rad)~%float64 xpr~%float64 ypr                 # pole offset rate (rad/day)~%float64 ut1_utc             # ut1-utc (s)~%float64 lod                 # length of day (s/day)~%================================================================================~%MSG: rtkrcv/lam~%#Datatype for lam message type (carrier wave lengths (m) )~%~%float64 L1~%float64 L2~%float64 L5~%float64 L6~%float64 L7~%float64 L8~%~%================================================================================~%MSG: rtkrcv/cbias~%# code bias (0:p1-p2,1:p1-c1,2:p2-c2) (m)~%~%float64 p1_p2~%float64 p1_c1~%float64 p2_c2~%================================================================================~%MSG: rtkrcv/AntennaParameter~%# antenna parameter type~%~%int32 sat              # satellite number (0:receiver)~%int8[] type            # antenna type~%int8[] code            # serial number or satellite code~%~%time ts                # valid time start~%time te                # valid time end~%~%float64[3] off         # phase center offset e/n/u or x/y/z (m)~%float64[19] var        # phase center variation (m)~%                       # el=90,85,...,0 or nadir=0,1,2,3,... (deg)~%================================================================================~%MSG: rtkrcv/sbssat_t~%# SBAS satellite corrections type~%~%int32 iodp               # IODP (issue of date mask)~%int32 nsat               # number of satellites~%int32 tlat               # system latency (s)~%sbssatp_t[] sat          # satellite correction~%================================================================================~%MSG: rtkrcv/sbssatp_t~%# SBAS satellite correction type~%~%int32 sat                                   # satellite number~%SbasFastCorrection fcorr                    # fast correction~%SbasLongTermErrorCorrection lcorr           # long term correction~%================================================================================~%MSG: rtkrcv/SbasFastCorrection~%# SBAS fast correction type~%~%time t0             # time of applicability (TOF)~%float64 prc         # pseudorange correction (PRC) (m)~%float64 rrc         # range-rate correction (RRC) (m/s)~%float64 dt          # range-rate correction delta-time (s)~%int32 iodf          # IODF (issue of date fast corr)~%int16 udre          # UDRE+1~%int16 ai            # degradation factor indicator~%================================================================================~%MSG: rtkrcv/SbasLongTermErrorCorrection~%# SBAS long term satellite error correction type~%~%time t0                        # correction time~%int32 iode                     # IODE (issue of date ephemeris)~%geometry_msgs/Vector3 dpos     # delta position (m) (ecef)~%geometry_msgs/Vector3 dvel     # delta velocity (m/s) (ecef)~%float64 daf0                   # delta clock-offset(s,s/s)~%float64 daf1s                  # delta drift (s,s/s)~%~%================================================================================~%MSG: rtkrcv/sbsion_t~%# SBAS ionospheric corrections type~%~%int32 iodi                 # IODI (issue of date ionos corr)~%int32 nigp                 # number of igps~%sbsigp_t[] igp             # ionospheric correction~%================================================================================~%MSG: rtkrcv/sbsigp_t~%# SBAS ionospheric correction type~%~%time t0               # correction time~%int16 lat             # latitude (deg)~%int16 lon             # longitude (deg)~%int16 give            # GIVI+1~%float32 delay         # vertical delay estimate (m)~%================================================================================~%MSG: rtkrcv/DifferentialGnss~%# DGPS/GNSS correction type~%~%time t0             # correction time~%float64 prc         # pseudorange correction (PRC) (m)~%float64 rrc         # range rate correction (RRC) (m/s)~%int32 iod           # issue of data (IOD)~%float64 udre        # UDRE~%================================================================================~%MSG: rtkrcv/ssr_t~% # SSR correction type~%~%time t0             # epoch time (GPST)~%float64[] udi       # SSR update interval (s)~%int32[] iod~%int32 iode          # issue of data~%int32 ura           # URA indicator~%int32 refd          # sat ref datum (0:ITRF,1:regional)~%float64[] deph      # delta orbit {radial,along,cross} (m)~%float64[] ddeph     # dot delta orbit {radial,along,cross} (m/s)~%float64[] dclk      # delta clock {c0,c1,c2} (m,m/s,m/s^2)~%float64 hrclk       # high-rate clock corection (m)~%float32[] cbias     # code biases (m)~%uint8 update        # update flag (0:no update,1:update)~%================================================================================~%MSG: rtkrcv/QzssEphemeris~%# QZSS LEX ephemeris type~%~%time toe                             # epoch time (GPST)~%time tof                             # message frame time (GPST)~%~%int32 sat                            # satellite~%uint8 health                         # signal health (L1,L2,L1C,L5,LEX)~%uint8 ura                            # URA index~%~%geometry_msgs/Vector3  pos           # satellite position (m)~%geometry_msgs/Vector3  vel           # satellite velocity (m/s)~%geometry_msgs/Vector3  acc           # satellite acceleration (m/s2)~%geometry_msgs/Vector3  jerk          # satellite jerk (m/s3)~%float64 af0                          # satellite clock bias~%float64 af1                          # satellite clock drift (s,s/s)~%float64 tgd                          # TGD~%float64[] isc                        # ISC~%================================================================================~%MSG: rtkrcv/QzssIonosphereCorrection~%# QZSS LEX ionosphere correction type~%~%time t0                      # epoch time (GPST)~%float64 tspan                # valid time span (s)~%float64[2] pos0              # reference position {lat,lon} (rad)~%float64[6] coefs             # coefficients lat x lon (3 x 2)~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'Navigation)))
  "Returns full string definition for message of type 'Navigation"
  (cl:format cl:nil "# navigation data type~%~%~%~%~%~%~%~%~%~%Ephemeris[] eph                     # GPS/QZS/GAL ephemeris~%GlonassEphemeris[] geph             # GLONASS ephemeris~%SbasEphemeris[] seph                # SBAS ephemeris~%PreciseEphemeris[] peph             # precise ephemeris~%PreciseClock[] pclk                 # precise clock~%Almanac[] alm                       # almanac data~%TotalElectronContent[] tec          # TEC grid data~%stec_t[] stec                       # stec grid data ~%erp_t erp                           # earth rotation parameters~%~%float64[4] utc_gps                  # GPS delta-UTC parameters {A0,A1,T,W}~%float64[4] utc_glo                  # GLONASS UTC GPS time parameters~%float64[4] utc_gal                  # Galileo UTC GPS time parameters~%float64[4] utc_qzs                  # QZS UTC GPS time parameters~%float64[4] utc_cmp                  # BeiDou UTC parameters~%float64[4] utc_sbs                  # SBAS UTC parameters ~%float64[8] ion_gps                  # GPS iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3}~%float64[4] ion_gal                  # Galileo iono model parameters {ai0,ai1,ai2,0}~%float64[8] ion_qzs                  # QZSS iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3}~%float64[8] ion_cmp                  # BeiDou iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3} ~%int32 leaps                         # leap seconds (s)~%~%lam[] lamcwl                        # carrier wave lengths (m)~%cbias[] codebias                    # code bias (0:p1-p2,1:p1-c1,2:p2-c2) (m)~%AntennaParameter[] pcvs             # satellite antenna pcv~%sbssat_t sbssat                     # SBAS satellite corrections~%sbsion_t[] sbsion                   # SBAS ionosphere corrections~%DifferentialGnss[] dgps             # DGPS corrections~%ssr_t[] ssr                         # SSR corrections~%QzssEphemeris[] lexeph              # LEX ephemeris~%QzssIonosphereCorrection lexion     # LEX ionosphere correction~%~%float64[] wlbias                    # wide-lane bias (cycle) ~%float64[] glo_cpbias                # glonass code-phase bias {1C,1P,2C,2P} (m) ~%uint8[] glo_fcn~%================================================================================~%MSG: rtkrcv/Ephemeris~%# GPS/QZS/GAL broadcast ephemeris type~%~%int32 sat             # satellite number~%================================================================================~%MSG: rtkrcv/GlonassEphemeris~%# GLONASS broadcast ephemeris type~%~%int32 sat                      # satellite number~%int32 iode                     # IODE (0-6 bit of tb field)~%int32 frq                      # satellite frequency number~%int32 svh                      # satellite health~%int32 sva                      # satellite accuracy~%int32 age                      # satellite age of operation~%~%time toe                       # epoch of epherides (gpst)~%time tof                       # message frame time (gpst)~%~%geometry_msgs/Vector3 pos      # satellite position (ecef) (m)~%geometry_msgs/Vector3 vel      # satellite velocity (ecef) (m/s)~%geometry_msgs/Vector3 acc      # satellite acceleration (ecef) (m/s^2)~%float64 taun                   # SV clock bias (s)~%float64 gamn                   # relative freq bias~%float64 dtaun                  # delay between L1 and L2 (s)~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: rtkrcv/SbasEphemeris~%# SBAS ephemeris type~%~%int32 sat                       # satellite number~%time t0                         # reference epoch time (GPST)~%time tof                        # time of message frame (GPST)~%int32 sva                       # SV accuracy (URA index)~%int32 svh                       # SV health (0:ok)~%~%geometry_msgs/Vector3 pos       # satellite position (m) (ecef)~%geometry_msgs/Vector3 vel       # satellite velocity (m/s) (ecef)~%geometry_msgs/Vector3 acc       # satellite acceleration (m/s^2) (ecef)~%float64 af0                     # satellite clock-offset (s,s/s)~%float64 af1                     # satellite drift (s,s/s)~%================================================================================~%MSG: rtkrcv/PreciseEphemeris~%# precise ephemeris type~%~%time time                 # time (GPST)~%int32 index               # ephemeris index for multiple files~%float64[] pos             # satellite position/clock (ecef) (m|s)~%float32[] std             # satellite position/clock std (m|s)~%================================================================================~%MSG: rtkrcv/PreciseClock~%# precise clock type~%~%time time               # time (GPST)~%int32 index             # clock index for multiple files~%float64[] clk           # satellite clock (s)~%float32[] std           # satellite clock std (s)~%================================================================================~%MSG: rtkrcv/Almanac~%# The almanac consists of coarse orbit and status information for each satellite in the constellation, an ionospheric model, and information to relate GNSS derived time to Coordinated Universal Time (UTC)~%~%int32 sat                     # satellite number~%int32 svh                     # sv health (0:ok)~%int32 svconf                  # as and sv config~%int32 week                    # GPS/QZS: gps week, GAL: galileo week~%Header toa                    # Toa~%~%# SV orbit parameters~%float64 A~%float64 e~%float64 i0~%float64 OMG0~%float64 omg~%float64 M0~%float64 OMGd~%~%float64 toas                  # Toa (s) in week~%~%# SV clock parameters (af0,af1)~%float64 f0~%float64 f1~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.secs: seconds (stamp_secs) since epoch~%# * stamp.nsecs: nanoseconds since stamp_secs~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: rtkrcv/TotalElectronContent~%# TEC type~%~%time time                # epoch time (GPST)~%~%int32[] ndata            # TEC grid data size {nlat,nlon,nhgt}~%~%float64 rb               # earth radius (km)~%float64[] lats           # latitude start/interval (deg)~%float64[] lons           # longitude start/interval (deg)~%float64[] hgts           # heights start/interval (km)~%float64[] data           # TEC grid data (tecu)~%float32[] rms            # RMS values (tecu)~%================================================================================~%MSG: rtkrcv/stec_t~%# stec grid type~%~%float64[] pos              #latitude/longitude (deg)~%int32[] index              #search index~%int32 n~%int32 nmax                 #number of data~%stecd_t[] data             #stec data~%~%================================================================================~%MSG: rtkrcv/stecd_t~%# stec data type~%~%Header header           #time (GPST)~%uint8 sat               #satellite number~%uint8 slip              #slip flag~%float32 iono            #L1 ionosphere delay (m)~%float32 rate            #L1 ionosphere rate (m/s)~%float32 rms             #rms value (m)~%================================================================================~%MSG: rtkrcv/erp_t~%# earth rotation parameter type~%~%erpd_t[] data         # earth rotation parameter data~%================================================================================~%MSG: rtkrcv/erpd_t~%# earth rotation parameter data type~%~%float64 mjd                 # mjd (days)~%float64 xp~%float64 yp                  # pole offset (rad)~%float64 xpr~%float64 ypr                 # pole offset rate (rad/day)~%float64 ut1_utc             # ut1-utc (s)~%float64 lod                 # length of day (s/day)~%================================================================================~%MSG: rtkrcv/lam~%#Datatype for lam message type (carrier wave lengths (m) )~%~%float64 L1~%float64 L2~%float64 L5~%float64 L6~%float64 L7~%float64 L8~%~%================================================================================~%MSG: rtkrcv/cbias~%# code bias (0:p1-p2,1:p1-c1,2:p2-c2) (m)~%~%float64 p1_p2~%float64 p1_c1~%float64 p2_c2~%================================================================================~%MSG: rtkrcv/AntennaParameter~%# antenna parameter type~%~%int32 sat              # satellite number (0:receiver)~%int8[] type            # antenna type~%int8[] code            # serial number or satellite code~%~%time ts                # valid time start~%time te                # valid time end~%~%float64[3] off         # phase center offset e/n/u or x/y/z (m)~%float64[19] var        # phase center variation (m)~%                       # el=90,85,...,0 or nadir=0,1,2,3,... (deg)~%================================================================================~%MSG: rtkrcv/sbssat_t~%# SBAS satellite corrections type~%~%int32 iodp               # IODP (issue of date mask)~%int32 nsat               # number of satellites~%int32 tlat               # system latency (s)~%sbssatp_t[] sat          # satellite correction~%================================================================================~%MSG: rtkrcv/sbssatp_t~%# SBAS satellite correction type~%~%int32 sat                                   # satellite number~%SbasFastCorrection fcorr                    # fast correction~%SbasLongTermErrorCorrection lcorr           # long term correction~%================================================================================~%MSG: rtkrcv/SbasFastCorrection~%# SBAS fast correction type~%~%time t0             # time of applicability (TOF)~%float64 prc         # pseudorange correction (PRC) (m)~%float64 rrc         # range-rate correction (RRC) (m/s)~%float64 dt          # range-rate correction delta-time (s)~%int32 iodf          # IODF (issue of date fast corr)~%int16 udre          # UDRE+1~%int16 ai            # degradation factor indicator~%================================================================================~%MSG: rtkrcv/SbasLongTermErrorCorrection~%# SBAS long term satellite error correction type~%~%time t0                        # correction time~%int32 iode                     # IODE (issue of date ephemeris)~%geometry_msgs/Vector3 dpos     # delta position (m) (ecef)~%geometry_msgs/Vector3 dvel     # delta velocity (m/s) (ecef)~%float64 daf0                   # delta clock-offset(s,s/s)~%float64 daf1s                  # delta drift (s,s/s)~%~%================================================================================~%MSG: rtkrcv/sbsion_t~%# SBAS ionospheric corrections type~%~%int32 iodi                 # IODI (issue of date ionos corr)~%int32 nigp                 # number of igps~%sbsigp_t[] igp             # ionospheric correction~%================================================================================~%MSG: rtkrcv/sbsigp_t~%# SBAS ionospheric correction type~%~%time t0               # correction time~%int16 lat             # latitude (deg)~%int16 lon             # longitude (deg)~%int16 give            # GIVI+1~%float32 delay         # vertical delay estimate (m)~%================================================================================~%MSG: rtkrcv/DifferentialGnss~%# DGPS/GNSS correction type~%~%time t0             # correction time~%float64 prc         # pseudorange correction (PRC) (m)~%float64 rrc         # range rate correction (RRC) (m/s)~%int32 iod           # issue of data (IOD)~%float64 udre        # UDRE~%================================================================================~%MSG: rtkrcv/ssr_t~% # SSR correction type~%~%time t0             # epoch time (GPST)~%float64[] udi       # SSR update interval (s)~%int32[] iod~%int32 iode          # issue of data~%int32 ura           # URA indicator~%int32 refd          # sat ref datum (0:ITRF,1:regional)~%float64[] deph      # delta orbit {radial,along,cross} (m)~%float64[] ddeph     # dot delta orbit {radial,along,cross} (m/s)~%float64[] dclk      # delta clock {c0,c1,c2} (m,m/s,m/s^2)~%float64 hrclk       # high-rate clock corection (m)~%float32[] cbias     # code biases (m)~%uint8 update        # update flag (0:no update,1:update)~%================================================================================~%MSG: rtkrcv/QzssEphemeris~%# QZSS LEX ephemeris type~%~%time toe                             # epoch time (GPST)~%time tof                             # message frame time (GPST)~%~%int32 sat                            # satellite~%uint8 health                         # signal health (L1,L2,L1C,L5,LEX)~%uint8 ura                            # URA index~%~%geometry_msgs/Vector3  pos           # satellite position (m)~%geometry_msgs/Vector3  vel           # satellite velocity (m/s)~%geometry_msgs/Vector3  acc           # satellite acceleration (m/s2)~%geometry_msgs/Vector3  jerk          # satellite jerk (m/s3)~%float64 af0                          # satellite clock bias~%float64 af1                          # satellite clock drift (s,s/s)~%float64 tgd                          # TGD~%float64[] isc                        # ISC~%================================================================================~%MSG: rtkrcv/QzssIonosphereCorrection~%# QZSS LEX ionosphere correction type~%~%time t0                      # epoch time (GPST)~%float64 tspan                # valid time span (s)~%float64[2] pos0              # reference position {lat,lon} (rad)~%float64[6] coefs             # coefficients lat x lon (3 x 2)~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <Navigation>))
  (cl:+ 0
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'eph) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'geph) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'seph) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'peph) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'pclk) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'alm) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'tec) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'stec) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'erp))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'utc_gps) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'utc_glo) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'utc_gal) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'utc_qzs) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'utc_cmp) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'utc_sbs) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'ion_gps) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'ion_gal) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'ion_qzs) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'ion_cmp) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     4
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'lamcwl) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'codebias) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'pcvs) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'sbssat))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'sbsion) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'dgps) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'ssr) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'lexeph) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'lexion))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'wlbias) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'glo_cpbias) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 8)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'glo_fcn) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 1)))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <Navigation>))
  "Converts a ROS message object to a list"
  (cl:list 'Navigation
    (cl:cons ':eph (eph msg))
    (cl:cons ':geph (geph msg))
    (cl:cons ':seph (seph msg))
    (cl:cons ':peph (peph msg))
    (cl:cons ':pclk (pclk msg))
    (cl:cons ':alm (alm msg))
    (cl:cons ':tec (tec msg))
    (cl:cons ':stec (stec msg))
    (cl:cons ':erp (erp msg))
    (cl:cons ':utc_gps (utc_gps msg))
    (cl:cons ':utc_glo (utc_glo msg))
    (cl:cons ':utc_gal (utc_gal msg))
    (cl:cons ':utc_qzs (utc_qzs msg))
    (cl:cons ':utc_cmp (utc_cmp msg))
    (cl:cons ':utc_sbs (utc_sbs msg))
    (cl:cons ':ion_gps (ion_gps msg))
    (cl:cons ':ion_gal (ion_gal msg))
    (cl:cons ':ion_qzs (ion_qzs msg))
    (cl:cons ':ion_cmp (ion_cmp msg))
    (cl:cons ':leaps (leaps msg))
    (cl:cons ':lamcwl (lamcwl msg))
    (cl:cons ':codebias (codebias msg))
    (cl:cons ':pcvs (pcvs msg))
    (cl:cons ':sbssat (sbssat msg))
    (cl:cons ':sbsion (sbsion msg))
    (cl:cons ':dgps (dgps msg))
    (cl:cons ':ssr (ssr msg))
    (cl:cons ':lexeph (lexeph msg))
    (cl:cons ':lexion (lexion msg))
    (cl:cons ':wlbias (wlbias msg))
    (cl:cons ':glo_cpbias (glo_cpbias msg))
    (cl:cons ':glo_fcn (glo_fcn msg))
))
